package com.dcomet.health.web.rest;

import com.dcomet.module.domain.Generic;
import com.dcomet.module.domain.GenericSearchCriteria;
import com.dcomet.module.domain.GenericSearchRequest;
import com.dcomet.module.domain.Privilege;
import com.dcomet.module.domain.PrivilegeSearchCriteria;
import com.dcomet.module.domain.PrivilegeSearchRequest;
import com.dcomet.module.domain.Resource;
import com.dcomet.module.domain.ResourceSearchCriteria;
import com.dcomet.module.domain.ResourceSearchRequest;
import com.dcomet.module.domain.Role;
import com.dcomet.module.domain.RoleSearchCriteria;
import com.dcomet.module.domain.RoleSearchRequest;
import com.dcomet.module.domain.Staff;
import com.dcomet.module.domain.StaffUnitMap;
import com.dcomet.module.domain.Unit;
import com.dcomet.module.domain.UnitSearchCriteria;
import com.dcomet.module.domain.UnitSearchRequest;
import com.dcomet.module.domain.UnitTaxMap;
import com.dcomet.module.domain.UnitTaxMapSearchCriteria;
import com.dcomet.module.domain.UnitTaxMapSearchRequest;
import com.dcomet.module.domain.User;
import com.dcomet.module.domain.UserFeature;
import com.dcomet.module.domain.UserFeatureSearchCriteria;
import com.dcomet.module.domain.UserFeatureSearchRequest;
import com.dcomet.module.domain.UserSearchCriteria;
import com.dcomet.module.domain.UserSearchRequest;
import com.dcomet.module.master.domain.ServiceMaster;
import com.dcomet.module.master.domain.ServiceMasterSearchCriteria;
import com.dcomet.module.master.domain.ServiceMasterSearchRequest;
import com.dcomet.module.master.domain.Sku;
import com.dcomet.module.master.domain.SkuSearchCriteria;
import com.dcomet.module.master.domain.SkuSearchRequest;
import com.dcomet.module.master.domain.StaffSearchCriteria;
import com.dcomet.module.master.domain.StaffSearchRequest;
import com.dcomet.module.master.domain.Supplier;
import com.dcomet.module.master.domain.SupplierSearchCriteria;
import com.dcomet.module.master.domain.SupplierSearchRequest;
import com.dcomet.module.master.service.DCometMasterService;
import java.util.ArrayList;
import java.util.List;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.SecurityContext;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
@Path("master/v1")
public class MasterResource extends BaseResource {

    @Autowired
    @Qualifier("masterService")
    public DCometMasterService masterService;

    @POST
    @Path("/item/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(@Context final SecurityContext securityContext, Sku parent) {
        addSecurityContext(securityContext, parent);
        masterService.saveSku(parent, true);
    }

    @GET
    @Path("/role")
    @Produces("application/json")
    public List<Role> getRole() throws Exception {
        return masterService.getRoleByCache();
    }

    @POST
    @Path("/roles/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(Role parent) {
        masterService.saveRole(parent, true);
    }

    @POST
    @Path("/roles/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Role> search(RoleSearchCriteria RoleSearchCriteria) {
        RoleSearchRequest searchRequest = new RoleSearchRequest();
        searchRequest.addRoleSearchCriteria(RoleSearchCriteria);
        return masterService.getRole(searchRequest, true);
    }

    @POST
    @Path("/supplier/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(Supplier parent) {
        masterService.saveSupplier(parent, true);
    }

    @POST
    @Path("/user/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<User> search(UserSearchCriteria userSearchCriteria) {
        UserSearchRequest searchRequest = new UserSearchRequest();
        searchRequest.addUserSearchCriteria(userSearchCriteria);
        return masterService.getUser(searchRequest, true);
    }

    @GET
    @Path("/login/user/info")
    @Consumes("application/json")
    @Produces("application/json")
    public User loginInfo(@Context final SecurityContext securityContext) {
        UserSearchRequest searchRequest = new UserSearchRequest();
        List<Criterion> searchCriterionList = new ArrayList<>();
        searchCriterionList.add(Restrictions.eq("userID", securityContext.getUserPrincipal().getName()));
        searchRequest.setSearchCriterionList(searchCriterionList);
        User user = masterService.getUser(searchRequest, false).get(0);
        user.setPageList(masterService.getPageLayout(user.getId()));
        return user;
    }

    @POST
    @Path("/service/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(@Context final SecurityContext securityContext, ServiceMaster parent) {
        masterService.saveServiceMaster(parent, true);
    }

    @POST
    @Path("/user/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(@Context final SecurityContext securityContext, User parent) {
        addCondtionalSecurityContext(securityContext, parent);
        masterService.saveUser(parent, true);
    }

    @POST
    @Path("/staff/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(@Context final SecurityContext securityContext, Staff parent) {
        addCondtionalSecurityContext(securityContext, parent);
        masterService.saveStaff(parent, true);
    }

    @POST
    @Path("/unit/save")
    @Consumes("application/json")
    @Produces("application/json")
    public void save(@Context final SecurityContext securityContext, Unit unit) {
        addSecurityContext(securityContext, unit);
        masterService.saveUnit(unit);
    }

    @POST
    @Path("/service/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<ServiceMaster> search(ServiceMasterSearchCriteria serviceMasterSearchCriteria) {
        ServiceMasterSearchRequest searchRequest = new ServiceMasterSearchRequest();
        searchRequest.addServiceMasterCriteria(serviceMasterSearchCriteria);
        return masterService.getServiceMaster(searchRequest, true);

    }

    @POST
    @Path("/privilege/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Privilege> search(PrivilegeSearchCriteria privilegeSearchCriteria) {
        PrivilegeSearchRequest searchRequest = new PrivilegeSearchRequest();
        searchRequest.addPrivilegeSearchCriteria(privilegeSearchCriteria);
        return masterService.getPrivilege(searchRequest, true);

    }

    @POST
    @Path("/sku/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Sku> search(SkuSearchCriteria skuSearchCriteria) {
        SkuSearchRequest searchRequest = new SkuSearchRequest();
        searchRequest.addSkuSearchCriteria(skuSearchCriteria);
        return masterService.getSku(searchRequest, true);
    }

    @POST
    @Path("/supplier/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Supplier> search(SupplierSearchCriteria supplierSearchCriteria) {
        SupplierSearchRequest searchRequest = new SupplierSearchRequest();
        searchRequest.addSupplierCriteria(supplierSearchCriteria);
        return masterService.getSupplier(searchRequest, true);

    }

    @GET
    @Path("/login/user/unit")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Unit> userUnit(@Context final SecurityContext securityContext) {
        User user = getLoginUser(securityContext);
        UnitSearchRequest unitSearchRequest = new UnitSearchRequest();
        List<Criterion> searchCriterionList = new ArrayList<>();
        searchCriterionList.add(Restrictions.eq("unitEntityRID", user.getEntityRid()));
        unitSearchRequest.setSearchCriterionList(searchCriterionList);
        return masterService.getUnit(unitSearchRequest);

    }

    //--------------Resource--------------------
    @POST
    @Path("/resource/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Resource> search(ResourceSearchCriteria resourceSearchCriteria) {
        ResourceSearchRequest resourceSearchRequest = new ResourceSearchRequest();
        resourceSearchRequest.addResourceCriteria(resourceSearchCriteria);
        return masterService.getResource(resourceSearchRequest, true);

    }

    //--------------Generic--------------------
    @POST
    @Path("/generic/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Generic> search(GenericSearchCriteria genericSearchCriteria) {
        GenericSearchRequest genericSearchRequest = new GenericSearchRequest();
        genericSearchRequest.addGenericSearchCriteria(genericSearchCriteria);
        return masterService.getGeneric(genericSearchRequest);

    }

    //    --------------UnitTaxMap--------------------
    @POST
    @Path("/unittaxmap/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<UnitTaxMap> search(UnitTaxMapSearchCriteria unitTaxMapSearchCriteria) {
        UnitTaxMapSearchRequest unitTaxMapSearchRequest = new UnitTaxMapSearchRequest();
        unitTaxMapSearchRequest.addUnitTaxMapCriteria(unitTaxMapSearchCriteria);
        return masterService.getUnitTaxMap(unitTaxMapSearchRequest);

    }

    //------------------Staff------------------------
    @POST
    @Path("/staff/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Staff> search(StaffSearchCriteria staffSearchCriteria) {
        StaffSearchRequest staffSearchRequest = new StaffSearchRequest();
        staffSearchRequest.addStaffSearchCriteria(staffSearchCriteria);
        return masterService.getStaff(staffSearchRequest, true);

    }

    //------------------StaffUnitMap------------------------
    @POST
    @Path("/staffunit/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<StaffUnitMap> searchStaffUnitMap() {
        StaffSearchRequest staffSearchRequest = new StaffSearchRequest();
        return masterService.getStaffUnitMap(staffSearchRequest);
    }

    @POST
    @Path("/unit/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<Unit> search(UnitSearchCriteria unitSearchCriteria) {
        UnitSearchRequest unitSearchRequest = new UnitSearchRequest();
        unitSearchRequest.addUnitCriteria(unitSearchCriteria);
        return masterService.getUnit(unitSearchRequest);

    }

    //    --------------UserFeature--------------------
    @POST
    @Path("/userFeature/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<UserFeature> search(UserFeatureSearchCriteria userFeatureSearchCriteria) {
        UserFeatureSearchRequest userFeatureSearchRequest = new UserFeatureSearchRequest();
        userFeatureSearchRequest.addUserFeatureCriteria(userFeatureSearchCriteria);
        return masterService.getUserFeature(userFeatureSearchRequest);

    }

    @GET
    @Path("/logout")
    public void logout(@Context LoginContext loginContext, @Context HttpServletRequest httpServletRequest) throws LoginException {
        HttpSession session = httpServletRequest.getSession(true);
        session.invalidate();
        loginContext.logout();
    }

    @POST
    @Path("/investigation/search")
    @Consumes("application/json")
    @Produces("application/json")
    public List<ServiceMaster> searchInvestigation(ServiceMasterSearchCriteria servicemasterSearchCriteria) {
        ServiceMasterSearchRequest serviceMasterSearchRequest = new ServiceMasterSearchRequest();
        serviceMasterSearchRequest.addServiceMasterCriteria(servicemasterSearchCriteria);
        return masterService.getServiceMaster(serviceMasterSearchRequest, true);
    }
}
