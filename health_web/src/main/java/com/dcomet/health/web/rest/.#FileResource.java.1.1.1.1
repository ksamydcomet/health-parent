package com.dcomet.health.web.rest;

import com.dcomet.health.dao.data.FileData;
import com.dcomet.health.dao.data.FileTransactionData;
import com.dcomet.health.service.business.DownloadService;
import com.dcomet.module.domain.User;
import com.dcomet.module.domain.UserSearchRequest;
import com.dcomet.module.master.service.DCometMasterService;
import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import org.apache.commons.io.IOUtils;
import org.apache.tika.Tika;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.jboss.resteasy.plugins.providers.multipart.InputPart;
import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
@Path("file")
public class FileResource extends BaseResource {

    @Autowired
    @Qualifier("masterService")
    private DCometMasterService masterService;

    @Autowired
    @Qualifier("downloadService")
    private DownloadService downloadService;
    
    @POST
    @Path("/upload")
    @Consumes("multipart/form-data")
    @Produces("appliation/json")
    public Response uploadFile(@Context final SecurityContext securityContext, MultipartFormDataInput input) throws IOException {

        Map<String, List<InputPart>> uploadForm = input.getFormDataMap();
        List<InputPart> inputParts = uploadForm.get("file");
        InputPart inputPart = inputParts.get(0);
        InputStream inputStream = inputPart.getBody(InputStream.class, null);

        byte[] bytes = IOUtils.toByteArray(inputStream);

        FileData image = new FileData();
        image.setData(bytes);
        image.setUserId(getLoginUser(securityContext.getUserPrincipal().getName()).getId());
        image = downloadService.storeFile(image);
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("imageId", image.getId());
        } catch (JSONException e) {
            throw new IOException(e);
        }
        return Response.status(200).entity(jsonObject.toString()).build();
    }

    @GET
    @Path("/mimetype/{imageId}")
    @Produces("image/jpg")
    public Response getFile(@PathParam("imageId") int imageId) {
        FileData file = downloadService.getFile(imageId);
        String mimeType = new Tika().detect(file.getData());
        mimeType = "application/x-tika-ooxml".equalsIgnoreCase(mimeType)?"application/vnd.ms-excel":mimeType;
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("imageId", file.getId());
            jsonObject.put("mimeType", mimeType);
        } catch (JSONException e) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
        return Response.ok().entity(jsonObject.toString()).build();
    }

    @GET
    @Path("/image")
    public Response getFile(@QueryParam("imageId") int imageId, @QueryParam("size") String size) {

        ByteArrayOutputStream bo = new ByteArrayOutputStream(2048);
        String mimeType = null;
        try {
            FileData file = downloadService.getFile(imageId);
            mimeType = new Tika().detect(file.getData());
            InputStream in = new ByteArrayInputStream(file.getData());
            mimeType = mimeType.toLowerCase();
            mimeType = "application/x-tika-ooxml".equalsIgnoreCase(mimeType)?"application/vnd.ms-excel":mimeType;

            if (mimeType.startsWith("image")) {
                BufferedImage image = ImageIO.read(in);
                if (size != null) {
                    float maxDimension = 750.0f;
                    if (size.equals("thumbnail")) {
                        maxDimension = 200.0f;
                    } else if (size.equals("tinythumbnail")) {
                        maxDimension = 100.0f;
                    }
                    int origWidth = image.getWidth();
                    float widthFactor = origWidth / maxDimension;
                    int origHeight = image.getHeight();
                    float heightFactor = origHeight / maxDimension;
                    float factor = widthFactor > heightFactor ? widthFactor : heightFactor;
                    int imageType = image.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : image.getType();
                    image = resizeImageWithHint(image, (int) (origWidth / factor), (int) (origHeight / factor), imageType);
                }
                ImageIO.write(image, "jpeg", bo);
                mimeType = "image/jpg";
            } else if (size != null && size.equalsIgnoreCase("download")) {
                byte[] image = new byte[1024];
                for (int content; (content = in.read(image)) != -1;) {
                    bo.write(image, 0, content);
                }
            }
        } catch (IOException ex) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }

        Date expires = new Date(System.currentTimeMillis() + 3600 * 1000);
        return Response.ok(bo.toByteArray(), mimeType).expires(expires).build();

    }

//    @GET
//    @Path("/cleanse")
//    @Produces("text/plain")
//    //@Scheduled(cron = "0 30 23 * * ?")
//    public void scheduledFileCleanse() {
//        this.cleanseFiles();
//    }
//
//    public synchronized Response cleanseFiles() {
//        this.fileStoreCleaner.verifyFileActivations();
//        return Response.ok().entity("File cleansing complete").build();
//
//    }
//    /**
//     * header sample { Content-Type=[image/png], Content-Disposition=[form-data;
//     * name="file"; filename="filename.extension"] }
//     *
//     */
//    //get uploaded filename, is there a easy way in RESTEasy?
//    private String getFileName(MultivaluedMap<String, String> header) {
//
//        String[] contentDisposition = header.getFirst("Content-Disposition").split(";");
//
//        for (String filename : contentDisposition) {
//            if ((filename.trim().startsWith("filename"))) {
//
//                String[] name = filename.split("=");
//
//                String finalFileName = name[1].trim().replaceAll("\"", "");
//                return finalFileName;
//            }
//        }
//        return "unknown";
//    }
//
//    //save to somewhere
//    private void writeFile(byte[] content, File file) throws IOException {
//
//        if (!file.exists()) {
//            file.createNewFile();
//        }
//
//        FileOutputStream fop = new FileOutputStream(file);
//
//        fop.write(content);
//        fop.flush();
//        fop.close();
//
//    }
    private static BufferedImage resizeImageWithHint(BufferedImage originalImage, int width, int height, int type) {
        BufferedImage resizedImage = new BufferedImage(width, height, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, width, height, null);
        g.dispose();
        g.setComposite(AlphaComposite.Src);

        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.setRenderingHint(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        return resizedImage;
    }

    private User getLoginUser(String userId) {
        UserSearchRequest userSearchRequest = new UserSearchRequest();
        List<Criterion> searchCriterionList = new ArrayList<>();
        searchCriterionList.add(Restrictions.eq("userID", userId));
        userSearchRequest.setSearchCriterionList(searchCriterionList);
        return masterService.getUser(userSearchRequest,false).get(0);
    }
    

    @GET
    @Path("/info/{Id}")
    @Produces("application/json")
    public FileTransactionData getFileInfo(@PathParam("Id") Integer id) {
        return downloadService.getFileInfo(id);
    }
    @POST
    @Path("/info/save")
    @Consumes("application/json")
    @Produces("application/json")
    public FileTransactionData saveFileInfo(FileTransactionData fileInfo) {
        return downloadService.saveFileInfo(fileInfo);
    }
}
