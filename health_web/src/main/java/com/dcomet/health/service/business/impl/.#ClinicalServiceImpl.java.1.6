package com.dcomet.health.service.business.impl;

import com.dcomet.health.adapter.ClinicalAdapter;
import com.dcomet.health.dao.ClinicalDAO;
import com.dcomet.health.dao.data.ComplaintsData;
import com.dcomet.health.dao.data.VisitPlanData;
import com.dcomet.health.dao.data.VisitTemplateData;
import com.dcomet.health.dao.data.VisitVitalsData;
import com.dcomet.health.domain.Complaints;
import com.dcomet.health.domain.ComplaintsSearchRequest;
import com.dcomet.health.domain.Visit;
import com.dcomet.health.domain.VisitPlan;
import com.dcomet.health.domain.VisitPlanSearchRequest;
import com.dcomet.health.domain.VisitTemplate;
import com.dcomet.health.domain.VisitTemplateSearchRequest;
import com.dcomet.health.domain.VisitVitals;
import com.dcomet.health.domain.VisitVitalsSearchRequest;
import com.dcomet.fw.exception.DcometDAOException;
import com.dcomet.fw.exception.DcometServiceException;
import com.dcomet.health.dao.data.AppointmentBookingData;
import com.dcomet.health.dao.data.AppointmentData;
import com.dcomet.health.dao.data.AppointmentReservationData;
import com.dcomet.health.dao.data.AppointmentResourceMapData;
import com.dcomet.health.dao.data.AppointmentTokenData;
import com.dcomet.health.dao.data.DrugRequestDData;
import com.dcomet.health.dao.data.DrugRequestHData;
import com.dcomet.health.dao.data.PatientData;
import com.dcomet.health.dao.data.VisitData;
import com.dcomet.health.domain.Appointment;
import com.dcomet.health.domain.AppointmentBooking;
import com.dcomet.health.domain.AppointmentBookingSearchRequest;
import com.dcomet.health.domain.AppointmentReservation;
import com.dcomet.health.domain.AppointmentReservationSearchRequest;
import com.dcomet.health.domain.AppointmentResourceMap;
import com.dcomet.health.domain.AppointmentResourceMapSearchRequest;
import com.dcomet.health.domain.AppointmentSearchRequest;
import com.dcomet.health.domain.AppointmentToken;
import com.dcomet.health.domain.AppointmentTokenSearchRequest;
import com.dcomet.health.domain.DrugRequestD;
import com.dcomet.health.domain.DrugRequestH;
import com.dcomet.health.domain.DrugRequestHSearchRequest;
import com.dcomet.health.domain.Patient;
import com.dcomet.health.domain.PatientSearchRequest;
import com.dcomet.health.domain.VisitSearchRequest;
import com.dcomet.health.service.business.ClinicalService;
import com.dcomet.health.service.business.DataDictionaryService;
import com.dcomet.module.domain.AutoNumber;
import com.dcomet.module.domain.Ddict;
import com.dcomet.module.domain.DdictSearchRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author Adhithya
 */
@Service("clinicalService")
@Transactional(propagation = Propagation.SUPPORTS)
public class ClinicalServiceImpl implements ClinicalService {

    @Autowired
    @Qualifier("clinicalDAO")
    ClinicalDAO clinicalDAO;

    @Autowired
    @Qualifier("clinicalAdapter")
    ClinicalAdapter clinicalAdapter;

    @Autowired
    @Qualifier("dataDictionaryService")
    DataDictionaryService dataDictionaryService;

    @Override
    public List<Appointment> getAppointment(AppointmentSearchRequest appointmentSearchRequest, boolean includeChilds) throws DcometServiceException {
        List<Appointment> result = null;
        try {
            List<AppointmentData> listData = clinicalDAO.getAppointment(appointmentSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertAppointmentDataToAppointment(listData);
                if (includeChilds) {
                    for (Appointment appointment : result) {
                        AppointmentResourceMapSearchRequest childSearchRequest = new AppointmentResourceMapSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("armApptRid", appointment.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<AppointmentResourceMap> appointmentResult = getAppointmentResourceMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(appointmentResult)) {
                            appointment.setAppointmentResourceMap(appointmentResult);
                        }
                    }
                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveAppointment(Appointment appointment, boolean includeChild) throws DcometServiceException {
        try {
            AppointmentData appointmentData = clinicalAdapter.convertAppointmentToAppointmentData(appointment);
            clinicalDAO.saveAppointment(appointmentData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(appointment.getAppointmentResourceMap())) {
                    List<AppointmentResourceMapData> appointmentResourceMapDataList = clinicalAdapter.convertAppointmentResourceMapToAppointmentResourceMapData(appointment.getAppointmentResourceMap());
                    for (AppointmentResourceMapData appointmentResourceMapData : appointmentResourceMapDataList) {
                        appointmentResourceMapData.setArmApptRid(appointmentData.getId());
                    }
                    clinicalDAO.saveAppointmentResourceMap(appointmentResourceMapDataList);
                }
            }

        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }

    }

    @Override
    public List<AppointmentBooking> getAppointmentBooking(AppointmentBookingSearchRequest appointmentBookingSearchRequest)
            throws DcometServiceException {
        List<AppointmentBooking> result = null;
        try {
            List<AppointmentBookingData> listData = clinicalDAO.getAppointmentBooking(appointmentBookingSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertAppointmentBookingDataToAppointmentBooking(listData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveAppointmentBooking(List<AppointmentBooking> appointmentBookingList) {
        try {
            List<AppointmentBookingData> appointmentBookingDataList = clinicalAdapter.convertAppointmentBookingToAppointmentBookingData(appointmentBookingList);
            clinicalDAO.saveAppointmentBooking(appointmentBookingDataList);
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public List<AppointmentResourceMap> getAppointmentResourceMap(AppointmentResourceMapSearchRequest appointmentResourcemapSearchRequest) throws DcometServiceException {
        List<AppointmentResourceMap> result = null;
        try {
            List<AppointmentResourceMapData> listData = clinicalDAO.getAppointmentResourceMap(appointmentResourcemapSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertAppointmentResourceMapDataToAppointmentResourceMap(listData);
//                if (includeChilds) {
//                    for (AppointmentResourceMap appointment : result) {
//                        AppointmentSearchRequest childSearchRequest = new AppointmentSearchRequest();
//                        List<Criterion> searchCriterionList = new ArrayList<Criterion>();
//                        searchCriterionList.add(Restrictions.eq("id", appointment.getArmApptRid()));
//                        childSearchRequest.setSearchCriterionList(searchCriterionList);
//                        List<Appointment> appointmentResult = getAppointment(childSearchRequest);
//                        if (CollectionUtils.isNotEmpty(appointmentResult)) {
//                            appointment.setAppointment(appointmentResult);
//                        }
//                    }
//                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

//    @Override
//    public void saveAppointmentResourceMap(List<AppointmentResourceMap> appointmentResourceMapList) {
//        try {
//            List<AppointmentResourceMapData> appointmentResourceMapDataList = clinicalAdapter.convertAppointmentResourceMapToAppointmentResourceMapData(appointmentResourceMapList);
//            clinicalDAO.saveAppointmentResourceMap(appointmentResourceMapDataList);
//        } catch (DcometDAOException e) {
//            throw new DcometServiceException(e);
//        } catch (DcometServiceException e) {
//            throw e;
//        } catch (Exception e) {
//            throw new DcometServiceException(e);
//        }
//    }
    @Override
    public List<AppointmentReservation> getAppointmentReservsation(AppointmentReservationSearchRequest appointmentReservationSearchRequest) throws DcometServiceException {
        List<AppointmentReservation> result = null;
        try {
            List<AppointmentReservationData> listData = clinicalDAO.getAppointmentReservation(appointmentReservationSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertAppointmentReservationDataToAppointmentReservation(listData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveAppointmentReservsation(List<AppointmentReservation> appointmentReservationList) {
        try {
            List<AppointmentReservationData> appointmentReservationDataList = clinicalAdapter.convertAppointmentReservationToAppointmentReservationData(appointmentReservationList);
            clinicalDAO.saveAppointmentReservation(appointmentReservationDataList);
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public List<AppointmentToken> getAppointmentToken(AppointmentTokenSearchRequest appointmentTokenSearchRequest) throws DcometServiceException {
        List<AppointmentToken> result = null;
        try {
            List<AppointmentTokenData> listData = clinicalDAO.getAppointmentToken(appointmentTokenSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertAppointmentTokenDataToAppointmentToken(listData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;

    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveAppointmentToken(List<AppointmentToken> appointmentToken) {
        try {
            List<AppointmentTokenData> appointmentTokenDataList = clinicalAdapter.convertAppointmentTokenToAppointmentTokenData(appointmentToken);
            clinicalDAO.saveAppointmentToken(appointmentTokenDataList);
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public Patient getPatient(Integer patientId) throws DcometServiceException {
        PatientSearchRequest patientSearchRequest = new PatientSearchRequest();
        patientSearchRequest.setSearchCriterionList(Arrays.asList(new Criterion[]{Restrictions.eq("id", patientId)}));
        List<Patient> resultList = getPatient(patientSearchRequest);
        return CollectionUtils.isNotEmpty(resultList) ? resultList.get(0) : null;
    }

    @Override
    public List<Patient> getPatient(PatientSearchRequest patientSearchRequest) throws DcometServiceException {
        List<Patient> result = new ArrayList<>();
        try {
            List<PatientData> resultData = clinicalDAO.getPatient(patientSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = clinicalAdapter.convertPatientDataToPatient(resultData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public Integer savePatient(Patient patient) throws DcometDAOException {
        try {
            if (patient.getId() == null) {
                AutoNumber autoNumber = dataDictionaryService.getAutoNumberByCategory("MRN", patient.getEntityRid());
                patient.setPatMrnNo(autoNumber.getAutoNumber());
                patient.setPatSeqNo(autoNumber.getAutoSequenceNumber());
                patient.setPatRegDate(patient.getCurrentDateByUTZ());
                dataDictionaryService.saveAutoNumberIncrement("MRN", patient.getEntityRid());
            }
            PatientData patientData = clinicalAdapter.convertPatientToPatientData(patient);
            clinicalDAO.savePatient(patientData);
            return patientData.getId();
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public Visit getVisit(Integer id) throws DcometServiceException {
        VisitSearchRequest visitSearchRequest = new VisitSearchRequest();
        visitSearchRequest.setSearchCriterionList(Arrays.asList(new Criterion[]{Restrictions.eq("id", id)}));
        List<Visit> result = getVisit(visitSearchRequest, false);
        return CollectionUtils.isNotEmpty(result) ? result.get(0) : null;
    }

    @Override
    public List<Visit> getVisit(VisitSearchRequest visitSearchRequest, boolean includeChilds) throws DcometServiceException {
        List<Visit> result = null;
        try {
            List<VisitData> listData = clinicalDAO.getVisits(visitSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertVisitDataToVisit(listData);
                if (includeChilds) {
                    for (Visit visit : result) {
                        PatientSearchRequest patientSearchRequest = new PatientSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("id", visit.getVisPatRid()));
                        patientSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<Patient> patientResult = getPatient(patientSearchRequest);
                        if (patientResult != null && !patientResult.isEmpty()) {
                            visit.setPatient(patientResult);
                        }
                        searchCriterionList.clear();
                        DdictSearchRequest ddictSearchRequest = new DdictSearchRequest();
                        searchCriterionList.add(Restrictions.eq("id", visit.getVisReasonIndex()));
                        ddictSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<Ddict> ddictResult = dataDictionaryService.getDdict(ddictSearchRequest);
                        if (ddictResult != null && !ddictResult.isEmpty()) {
                            visit.setVisReasonName(ddictResult.get(0).getDdictValue());
                        }
                        searchCriterionList.clear();
                        searchCriterionList.add(Restrictions.eq("id", visit.getVisSpecialityIndex()));
                        ddictSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<Ddict> ddictResult1 = dataDictionaryService.getDdict(ddictSearchRequest);
                        if (ddictResult1 != null && !ddictResult1.isEmpty()) {
                            visit.setVisSpecialityName(ddictResult1.get(0).getDdictValue());
                        }
                    }
                }

            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public Integer saveVisit(Visit visit) throws DcometDAOException {
        try {
            VisitData visitData = clinicalAdapter.convertVisitToVisitData(visit);
            clinicalDAO.saveVisit(visitData);
            return visitData.getId();
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public List<Complaints> getComplaints(ComplaintsSearchRequest complaintsSearchRequest) throws DcometServiceException {
        List<Complaints> result = null;
        try {
            List<ComplaintsData> resultData = clinicalDAO.getComplaints(complaintsSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = clinicalAdapter.convertComplaintsDataToComplaints(resultData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<VisitVitals> getVisitVitals(VisitVitalsSearchRequest visitVitalsSearchRequest) throws DcometServiceException {
        List<VisitVitals> result = null;
        try {
            List<VisitVitalsData> resultData = clinicalDAO.getVisitVitals(visitVitalsSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = clinicalAdapter.convertVisitVitalsDataToVisitVitals(resultData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<VisitPlan> getVisitPlan(VisitPlanSearchRequest visitPlanSearchRequest) throws DcometServiceException {
        List<VisitPlan> result = null;
        try {
            List<VisitPlanData> resultData = clinicalDAO.getVisitPlan(visitPlanSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = clinicalAdapter.convertVisitPlanDataToVisitPlan(resultData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<VisitTemplate> getVisitTemplate(VisitTemplateSearchRequest visitTemplateSearchRequest) throws DcometServiceException {
        List<VisitTemplate> result = null;
        try {
            List<VisitTemplateData> resultData = clinicalDAO.getVisitTemplate(visitTemplateSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = clinicalAdapter.convertVisitTemplateDataToVisitTemplate(resultData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

//    public List<Visit> getMyPatients(VisitSearchRequest visitSearchRequest, boolean includeLists) throws DcometServiceException {
//        List<Visit> result = new ArrayList<>();
//        try {
//            List<SkuData> resultData = masterDAO.getSku(visitSearchRequest);
//            if (CollectionUtils.isNotEmpty(resultData)) {
//                result = masterAdapter.convertSkuDataToSku(resultData);
//                if (includeLists) {
//                    for (Sku sku : result) {
//                        SkuSearchRequest childSearchRequest = new SkuSearchRequest();
//                        List<Criterion> searchCriterionList = new ArrayList<>();
//                        searchCriterionList.add(Restrictions.eq("ssmSkuRID", sku.getId()));
//                        childSearchRequest.setSearchCriterionList(searchCriterionList);
//                        List<SkuSupplierMap> skuSupplierMapResult = getSkuSupplierMap(childSearchRequest);
//                        if (CollectionUtils.isNotEmpty(skuSupplierMapResult)) {
//                            sku.setSkuSupplierMapList(skuSupplierMapResult);
//                        }
//                        searchCriterionList.clear();
//                        searchCriterionList.add(Restrictions.eq("sumSkuRID", sku.getId()));
//                        childSearchRequest.setSearchCriterionList(searchCriterionList);
//                        List<SkuUnitMap> skuUnitMap2Result = getSkuUnitMap(childSearchRequest);
//                        if (CollectionUtils.isNotEmpty(skuUnitMap2Result)) {
//                            sku.setSkuUnitMapList(skuUnitMap2Result);
//                        }
//                    }
//
//                }
//            }
//        } catch (DcometDAOException e) {
//            throw new DcometServiceException(e);
//        } catch (DcometServiceException e) {
//            throw e;
//        } catch (Exception e) {
//            throw new DcometServiceException(e);
//        }
//        return result;
//    }
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveMyPatient(Visit visit, boolean includeLists) throws DcometServiceException {
        try {
            if (includeLists) {
                if (CollectionUtils.isNotEmpty(visit.getComplaints())) {
                    for (Complaints complaints : visit.getComplaints()) {
                        complaints.setCurrentObject(visit);
                        ComplaintsData complaintsData = clinicalAdapter.convertComplaintsToComplaintsData(complaints);
                        clinicalDAO.saveComplaints(complaintsData);
                    }

                }
                if (CollectionUtils.isNotEmpty(visit.getVisitVitals())) {
                    for (VisitVitals visitVitals : visit.getVisitVitals()) {
                        visitVitals.setCurrentObject(visit);
                        VisitVitalsData visitVitalsData = clinicalAdapter.convertVisitVitalsToVisitVitalsData(visitVitals);
                        clinicalDAO.saveVisitVitals(visitVitalsData);
                    }

                }

                if (CollectionUtils.isNotEmpty(visit.getVisitPlan())) {
                    for (VisitPlan visitPlan : visit.getVisitPlan()) {
                        visitPlan.setCurrentObject(visit);
                        VisitPlanData visitPlanData = clinicalAdapter.convertVisitPlanToVisitPlanData(visitPlan);
                        clinicalDAO.saveVisitPlan(visitPlanData);
                    }

                }

                if (CollectionUtils.isNotEmpty(visit.getVisitTemplate())) {
                    for (VisitTemplate visitTemplate : visit.getVisitTemplate()) {
                        visitTemplate.setCurrentObject(visit);
                        VisitTemplateData visitTemplateData = clinicalAdapter.convertVisitTemplateToVisitTemplateData(visitTemplate);
                        clinicalDAO.saveVisitTemplate(visitTemplateData);
                    }

                }
//                if (CollectionUtils.isNotEmpty(visit.getServiceRequest())) {
//                    for (ServiceRequest serviceRequest : visit.getServiceRequest()) {
//                        serviceRequest.setCurrentObject(visit);
//                        if (serviceRequest.getSerType() == 1) {
//                            serviceRequestService.save(serviceRequest, 0, "REQUEST_SERVICE_ORDER", "SUBMIT");
//                        }
//                    }
//                }
//                if (CollectionUtils.isNotEmpty(visit.getServiceRequestDrug())) {
//                    for (ServiceRequest serviceRequest : visit.getServiceRequestDrug()) {
//                        serviceRequest.setCurrentObject(visit);
//                        if (serviceRequest.getSerType() == 2) {
//                            serviceRequestService.save(serviceRequest, 0, "REQUEST_DRUGS_ORDER", "SUBMIT");
//                        }
//                    }
//
//                }

            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public void saveVisitVitals(VisitVitals visitVitals) throws DcometServiceException {
        try {
            VisitVitalsData visitVitalsData = clinicalAdapter.convertVisitVitalsToVisitVitalsData(visitVitals);
            clinicalDAO.saveVisitVitals(visitVitalsData);

        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
}
    }

    @Override
    public void saveComplaints(List<Complaints> complaintsList) throws DcometServiceException {
        try {
            List<ComplaintsData> complaintsDataList = clinicalAdapter.convertComplaintsToComplaintsData(complaintsList);
            clinicalDAO.saveComplaintsList(complaintsDataList);
        } catch (DcometServiceException e) {
            throw e;
        }
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveDrugH(DrugRequestH drugRequestH, boolean includeChilds) throws DcometServiceException {
        try {
            DrugRequestHData drugRequestHData = clinicalAdapter.convertDrugRequestHToDrugRequestHData(drugRequestH);
            clinicalDAO.saveDrugH(drugRequestHData);
            if (includeChilds) {
                if (CollectionUtils.isNotEmpty(drugRequestH.getDrugRequestDList())) {
                    List<DrugRequestDData> drugRequestDDataList = clinicalAdapter.convertDrugRequestDToDrugRequestDData(drugRequestH.getDrugRequestDList());
                    for (DrugRequestDData drugRequestDData : drugRequestDDataList) {
                        drugRequestDData.setDruReqDSrhRID(drugRequestHData.getId());
                    }
                    clinicalDAO.saveDrugD(drugRequestDDataList);
                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }

    }

    @Override
    public List<DrugRequestH> getDrugH(DrugRequestHSearchRequest drugRequestHSearchRequest, boolean includeChilds) throws DcometServiceException {
        List<DrugRequestH> result = null;
        try {
            List<DrugRequestHData> listData = clinicalDAO.getDrugH(drugRequestHSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = clinicalAdapter.convertDrugRequestHDataToDrugRequestH(listData);
                if (includeChilds) {
                    for (DrugRequestH drugRequestH : result) {
                        DrugRequestHSearchRequest childSearchRequest = new DrugRequestHSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("druReqDSrhRID", drugRequestH.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<DrugRequestD> ServiceResult = getDrugD(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(ServiceResult)) {
                            drugRequestH.setDrugRequestDList(ServiceResult);
                        }
                    }
                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<DrugRequestD> getDrugD(DrugRequestHSearchRequest drugRequestHSearchRequest) throws DcometServiceException {
        List<DrugRequestD> result = null;
        try {
            List<DrugRequestDData> drugRequestDDatalist = clinicalDAO.getDrugD(drugRequestHSearchRequest);
            if (CollectionUtils.isNotEmpty(drugRequestDDatalist)) {
                result = clinicalAdapter.convertDrugRequestDDataToDrugRequestD(drugRequestDDatalist);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

}
