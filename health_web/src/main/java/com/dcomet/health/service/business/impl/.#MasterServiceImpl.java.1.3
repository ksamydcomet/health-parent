package com.dcomet.health.service.business.impl;

import com.dcomet.fw.exception.DcometDAOException;
import com.dcomet.fw.exception.DcometServiceException;
import com.dcomet.health.adapter.MasterAdapter;
import com.dcomet.health.dao.MasterDAO;
import com.dcomet.health.dao.data.DiscountMasterData;
import com.dcomet.health.dao.data.DiscountServiceMapData;
import com.dcomet.health.dao.data.PayerAuthorizationData;
import com.dcomet.health.dao.data.PayerMasterData;
import com.dcomet.health.dao.data.PayerIncidentData;
import com.dcomet.health.dao.data.PayerServiceMapData;
import com.dcomet.health.dao.data.PrintTemplateData;
import com.dcomet.health.domain.DiscountMaster;
import com.dcomet.health.domain.DiscountMasterSearchRequest;
import com.dcomet.health.domain.DiscountServiceMap;
import com.dcomet.health.domain.PayerMaster;
import com.dcomet.health.domain.PayerAuthorization;
import com.dcomet.health.domain.PayerAuthorizationSearchRequest;
import com.dcomet.health.domain.PayerIncident;
import com.dcomet.health.domain.PayerIncidentSearchRequest;
import com.dcomet.health.domain.PayerMasterSearchRequest;
import com.dcomet.health.domain.PayerServiceMap;
import com.dcomet.health.domain.PayerServiceMapSearchRequest;
import com.dcomet.health.domain.PrintTemplate;
import com.dcomet.health.domain.PrintTemplateSearchRequest;
import com.dcomet.health.service.business.MasterService;
import com.dcomet.module.master.service.impl.DCometMasterServiceImpl;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

@Service("masterService")
@Transactional(propagation = Propagation.SUPPORTS)
public class MasterServiceImpl extends DCometMasterServiceImpl implements MasterService {

    @Autowired
    @Qualifier("masterDAO")
    MasterDAO masterDAO;

    @Autowired
    @Qualifier("masterAdapter")
    MasterAdapter masterAdapter;

    @Override
    public List<DiscountMaster> getDiscountMaster(DiscountMasterSearchRequest discountMasterSearchRequest, boolean includechilds) throws DcometServiceException {
        List<DiscountMaster> result = null;
        try {
            List<DiscountMasterData> listData = masterDAO.getDiscountMaster(discountMasterSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = masterAdapter.convertDiscountMasterDataToDiscountMaster(listData);
                if (includechilds) {
                    for (DiscountMaster discountMaster : result) {
                        DiscountMasterSearchRequest childSearchRequest = new DiscountMasterSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("dsmDisRid", discountMaster.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<DiscountServiceMap> ServiceResult = getDiscountServiceMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(ServiceResult)) {
                            discountMaster.setDiscountServiceMap(ServiceResult);
                        }
                    }
                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<PayerAuthorization> getPayerAuthorization(PayerAuthorizationSearchRequest payerAuthorizationSearchRequest, boolean includechilds) throws DcometDAOException {
        List<PayerAuthorization> result = null;
        try {
            List<PayerAuthorizationData> listData = masterDAO.getPayerAuthorization(payerAuthorizationSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = masterAdapter.convertPayerAuthorizationDataToPayerAuthorization(listData);
                if (includechilds) {
                    for (PayerAuthorization payerAuthorization : result) {
                        PayerIncidentSearchRequest childSearchRequest = new PayerIncidentSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("pidPayerRid", payerAuthorization.getPadRid()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<PayerIncident> ServiceResult = getPayerIncident(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(ServiceResult)) {
                            payerAuthorization.setPayerIncident(ServiceResult);
                        }
                    }
                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public void saveDiscountMaster(DiscountMaster discountMaster, boolean includeChild) throws DcometServiceException {
        try {
            DiscountMasterData discountMastertData = masterAdapter.convertDiscountMasterToDiscountMasterData(discountMaster);
            masterDAO.saveDiscountMaster(discountMastertData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(discountMaster.getDiscountServiceMap())) {
                    List<DiscountServiceMapData> discountServiceMapDataList = masterAdapter.convertDiscountServiceMapToDiscountServiceMapData(discountMaster.getDiscountServiceMap());
                    for (DiscountServiceMapData discountServiceMapData : discountServiceMapDataList) {
                        discountServiceMapData.setDsmDisRid(discountMastertData.getId());
                    }
                    masterDAO.saveDiscountServiceMap(discountServiceMapDataList);
                }
            }

        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public void savePayerMaster(PayerMaster payerMaster, boolean includeChild) throws DcometDAOException {
        try {
            PayerMasterData payerMasterData = masterAdapter.convertPayerMasterToPayerMasterData(payerMaster);
//            if (payerMasterData.getPdId() != null) {
//                if (CollectionUtils.isNotEmpty(payerMaster.getPayerServiceMap())) {
//                    masterDAO.deletePayerMaster(payerMasterData.getPdId());
//                    masterDAO.deletePayerServiceMap(payerMasterData.getPdId());
//
//                }
//            }
            masterDAO.savePayerMaster(payerMasterData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(payerMaster.getPayerServiceMap())) {
                    List<PayerServiceMapData> payerServiceMapDataList = masterAdapter.convertPayerServiceMapToPayerServiceMapData(payerMaster.getPayerServiceMap());
                    for (PayerServiceMapData payerServiceMapData : payerServiceMapDataList) {
                        payerServiceMapData.setPsmPdRid(payerMasterData.getPdId());
                    }
                    masterDAO.savePayerServiceMap(payerServiceMapDataList);
                }

            }

        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public List<DiscountServiceMap> getDiscountServiceMap(DiscountMasterSearchRequest discountMasterSearchRequest) throws DcometServiceException {
        List<DiscountServiceMap> result = null;
        try {
            List<DiscountServiceMapData> discountServiceMapDatalist = masterDAO.getDiscountServiceMap(discountMasterSearchRequest);
            if (CollectionUtils.isNotEmpty(discountServiceMapDatalist)) {
                result = masterAdapter.convertDiscountServiceMapDataToDiscountServiceMap(discountServiceMapDatalist);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void savePayerAuthorization(PayerAuthorization payerAuthorization, boolean includeChild) throws DcometDAOException {
        try {
            PayerAuthorizationData payerAuthorizationData = masterAdapter.convertPayerAuthorizationToPayerAuthorizationData(payerAuthorization);
            masterDAO.savePayerAuthorization(payerAuthorizationData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(payerAuthorization.getPayerIncident())) {
                    List<PayerIncidentData> payerIncidentDataList = masterAdapter.convertPayerIncidentToPayerIncidentData(payerAuthorization.getPayerIncident());
                    for (PayerIncidentData payerIncidentData : payerIncidentDataList) {
                        payerIncidentData.setPidPayerRid(payerIncidentData.getPidRid());
                    }
                    masterDAO.savePayerIncident(payerIncidentDataList);
                }
            }

        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
    }

    @Override
    public List<PayerIncident> getPayerIncident(PayerIncidentSearchRequest payerIncidentSearchRequest) throws DcometDAOException {
        List<PayerIncident> result = null;
        try {

            List<PayerIncidentData> listData = masterDAO.getPayerIncident(payerIncidentSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = masterAdapter.convertPayerIncidentDataToPayerIncident(listData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<PayerMaster> getPayerMaster(PayerMasterSearchRequest payerMasterSearchRequest, boolean includechilds) throws DcometDAOException {
        List<PayerMaster> result = null;
        try {
            List<PayerMasterData> listData = masterDAO.getPayerMaster(payerMasterSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = masterAdapter.convertPayerMasterDataToPayerMaster(listData);
                if (includechilds) {
                    for (PayerMaster payerMaster : result) {
                        PayerMasterSearchRequest childSearchRequest = new PayerMasterSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("psmPdRid", payerMaster.getPdId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<PayerServiceMap> ServiceResult = getPayerServiceMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(ServiceResult)) {
                            payerMaster.setPayerServiceMap(ServiceResult);
                        }
                    }
                }
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public List<PayerServiceMap> getPayerServiceMap(PayerMasterSearchRequest payerMasterSearchRequest) throws DcometDAOException {
        List<PayerServiceMap> result = null;
        try {
            List<PayerServiceMapData> payerServiceMapDatalist = masterDAO.getPayerServiceMap(payerMasterSearchRequest);
            if (CollectionUtils.isNotEmpty(payerServiceMapDatalist)) {
                result = masterAdapter.convertPayerServiceMapDataToPayerServiceMap(payerServiceMapDatalist);

            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

    @Override
    public void savePrintTemplate(List<PrintTemplate> printTemplateList) throws DcometServiceException {
        try {
            List<PrintTemplateData> printTemplateDataList = masterAdapter.convertPrintTemplateToPrintTemplateData(printTemplateList);
            for (PrintTemplateData printTemplateData : printTemplateDataList) {
                masterDAO.savePrintTemplate(printTemplateData);
}
        } catch (DcometServiceException e) {
            throw e;
        }
    }

    @Override
    public List<PrintTemplate> getPrintTemplate(PrintTemplateSearchRequest printTemplateSearchRequest) throws DcometServiceException {
        List<PrintTemplate> result = null;
        try {

            List<PrintTemplateData> listData = masterDAO.getPrintTemplate(printTemplateSearchRequest);
            if (CollectionUtils.isNotEmpty(listData)) {
                result = masterAdapter.convertPrintTemplateDataToPrintTemplate(listData);
            }
        } catch (DcometDAOException e) {
            throw new DcometServiceException(e);
        } catch (DcometServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometServiceException(e);
        }
        return result;
    }

}
