package com.dcomet.health.service.business.impl;

import com.dcomet.health.adapter.MasterAdapter;
import com.dcomet.health.dao.MasterDAO;
import com.dcomet.health.dao.data.GenericData;
import com.dcomet.health.dao.data.PrivilegeData;
import com.dcomet.health.dao.data.ResourceAvailabilityData;
import com.dcomet.health.dao.data.ResourceData;
import com.dcomet.health.dao.data.ResourceUnitMapData;
import com.dcomet.health.dao.data.ResourceWorkingHoursData;
import com.dcomet.health.dao.data.RoleData;
import com.dcomet.health.dao.data.ServiceMasterData;
import com.dcomet.health.dao.data.SkuData;
import com.dcomet.health.dao.data.SkuSupplierMapData;
import com.dcomet.health.dao.data.SkuUnitMapData;
import com.dcomet.health.dao.data.StaffData;
import com.dcomet.health.dao.data.StaffUnitMapData;
import com.dcomet.health.dao.data.SupplierData;
import com.dcomet.health.dao.data.SupplierEntityMapData;
import com.dcomet.health.dao.data.UnitData;
import com.dcomet.health.dao.data.UnitTaxMapData;
import com.dcomet.health.dao.data.UserData;
import com.dcomet.health.dao.data.UserFeatureData;
import com.dcomet.health.dao.data.UserPhotoData;
import com.dcomet.health.dao.data.UserRoleMapData;
import com.dcomet.health.domain.AutoNumber;
import com.dcomet.health.domain.BOWorkListSettings;
import com.dcomet.health.domain.Feature;
import com.dcomet.health.domain.FeatureSearchRequest;
import com.dcomet.health.domain.Generic;
import com.dcomet.health.domain.GenericSearchRequest;
import com.dcomet.health.domain.Page;
import com.dcomet.health.domain.Privilege;
import com.dcomet.health.domain.PrivilegeSearchRequest;
import com.dcomet.health.domain.Resource;
import com.dcomet.health.domain.ResourceAvailability;
import com.dcomet.health.domain.ResourceSearchRequest;
import com.dcomet.health.domain.ResourceUnitMap;
import com.dcomet.health.domain.ResourceWorkingHours;
import com.dcomet.health.domain.Role;
import com.dcomet.health.domain.RoleSearchRequest;
import com.dcomet.health.domain.ServiceMaster;
import com.dcomet.health.domain.ServiceMasterSearchRequest;
import com.dcomet.health.domain.Sku;
import com.dcomet.health.domain.SkuSearchRequest;
import com.dcomet.health.domain.SkuSupplierMap;
import com.dcomet.health.domain.SkuUnitMap;
import com.dcomet.health.domain.Staff;
import com.dcomet.health.domain.StaffSearchRequest;
import com.dcomet.health.domain.StaffUnitMap;
import com.dcomet.health.domain.Supplier;
import com.dcomet.health.domain.SupplierEntityMap;
import com.dcomet.health.domain.SupplierSearchRequest;
import com.dcomet.health.domain.Unit;
import com.dcomet.health.domain.UnitSearchRequest;
import com.dcomet.health.domain.UnitTaxMap;
import com.dcomet.health.domain.UnitTaxMapSearchRequest;
import com.dcomet.health.domain.User;
import com.dcomet.health.domain.UserFeature;
import com.dcomet.health.domain.UserFeatureSearchRequest;
import com.dcomet.health.domain.UserRoleMap;
import com.dcomet.health.domain.UserSearchRequest;
import com.dcomet.health.exception.DcometHealthDAOException;
import com.dcomet.health.exception.DcometHealthServiceException;
import com.dcomet.health.fw.common.caching.CacheManager;
import com.dcomet.health.service.business.DataDictionaryService;
import com.dcomet.health.service.business.MasterService;
import com.dcomet.health.service.business.NotificationService;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author Adhithya
 */
@Service("masterService")
@Transactional(propagation = Propagation.SUPPORTS)
public class MasterServiceImpl implements MasterService {

    @Autowired
    @Qualifier("masterDAO")
    MasterDAO masterDAO;

    @Autowired
    @Qualifier("masterAdapter")
    private MasterAdapter masterAdapter;

    @Autowired
    @Qualifier("dataDictionaryService")
    private DataDictionaryService dataDictionaryService;

    @Autowired
    @Qualifier("notificationService")
    private NotificationService notificationService;

    //---Servicemaster---
    @Override
    public List<ServiceMaster> getServiceMaster(ServiceMasterSearchRequest seriviceMasterSearchRequest) throws DcometHealthServiceException {
        List<ServiceMaster> result = null;
        try {
            List<ServiceMasterData> resultData = masterDAO.getServiceMaster(seriviceMasterSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertServiceMasterDataToServiceMaster(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveServiceMaster(ServiceMaster serviceMaster) throws DcometHealthServiceException {
        try {
            ServiceMasterData serviceMasterData = masterAdapter.convertServiceMasterToServiceMasterData(serviceMaster);
            masterDAO.saveServiceMaster(serviceMasterData);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<Sku> getSku(SkuSearchRequest skuSearchRequest, boolean includeChilds) throws DcometHealthServiceException {
        List<Sku> result = null;
        try {
            List<SkuData> resultData = masterDAO.getSku(skuSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertSkuDataToSku(resultData);
                if (includeChilds) {
                    for (Sku sku : result) {
                        SkuSearchRequest childSearchRequest = new SkuSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("ssmSkuRID", sku.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<SkuSupplierMap> skuSupplierMapResult = getSkuSupplierMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(skuSupplierMapResult)) {
                            sku.setSkuSupplierMapList(skuSupplierMapResult);
                        }
                        searchCriterionList.clear();
                        searchCriterionList.add(Restrictions.eq("sumSkuRID", sku.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<SkuUnitMap> skuUnitMap2Result = getSkuUnitMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(skuUnitMap2Result)) {
                            sku.setSkuUnitMapList(skuUnitMap2Result);
                        }
                    }

                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveSku(Sku sku, boolean includeChild) throws DcometHealthServiceException {

        try {
            SkuData skuData = masterAdapter.convertSkuToSkuData(sku);
            masterDAO.saveSku(skuData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(sku.getSkuSupplierMapList())) {
                    List<SkuSupplierMapData> skuSupplierMapDataList = masterAdapter.convertSkuSupplierMapToSkuSupplierMapData(sku.getSkuSupplierMapList());
                    for (SkuSupplierMapData skuSupplierMapData : skuSupplierMapDataList) {
                        skuSupplierMapData.setSkuData(skuData);
                    }
                    masterDAO.saveSkuSupplierMap(skuSupplierMapDataList);
                }

                if (sku.getSkuUnitMapList() != null && !sku.getSkuUnitMapList().isEmpty()) {
                    List<SkuUnitMapData> skuUnitMapDataList = masterAdapter.convertSkuUnitMapToSkuUnitMapData(sku.getSkuUnitMapList());
                    for (SkuUnitMapData skuUnitMapData : skuUnitMapDataList) {
                        skuUnitMapData.setSumSkuRID(skuData.getId());
                    }
                    masterDAO.saveSkuUnitMap(skuUnitMapDataList);
                }

            }

        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public String getSkuName(Integer skuId) throws DcometHealthServiceException {
        String skuName = null;
        SkuSearchRequest skuSearchRequest = new SkuSearchRequest();
        List<Criterion> criterionList = new ArrayList<>();
        criterionList.add(Restrictions.eq("id", skuId));
        skuSearchRequest.setSearchCriterionList(criterionList);
        List<Sku> skuList = getSku(skuSearchRequest, false);
        if (skuList != null) {
            if (CollectionUtils.isNotEmpty(skuList)) {
                skuName = skuList.get(0).getSkuName();
            }
        }
        return skuName;
    }
//---------------------SkuSupplierMap--------------

    @Override
    public List<SkuSupplierMap> getSkuSupplierMap(SkuSearchRequest skuSupplierMapSearchRequest) throws DcometHealthServiceException {
        List<SkuSupplierMap> result = null;
        try {
            List<SkuSupplierMapData> resultData = masterDAO.getSkuSupplierMap(skuSupplierMapSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertSkuSupplierMapDataToSkuSupplierMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public void saveSkuSupplierMap(List<SkuSupplierMap> skuSupplierMapList) throws DcometHealthServiceException {
        try {
            List<SkuSupplierMapData> skuSupplierMapDataList = masterAdapter.convertSkuSupplierMapToSkuSupplierMapData(skuSupplierMapList);
            masterDAO.saveSkuSupplierMap(skuSupplierMapDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<SkuUnitMap> getSkuUnitMap(SkuSearchRequest skuUnitMapSearchRequest) throws DcometHealthServiceException {
        List<SkuUnitMap> result = null;
        try {
            List<SkuUnitMapData> resultData = masterDAO.getSkuUnitMap(skuUnitMapSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertSkuUnitMapDataToSkuUnitMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public void saveSkuUnitMap(List<SkuUnitMap> skuUnitMapList) throws DcometHealthServiceException {
        try {
            List<SkuUnitMapData> skuUnitMapDataList = masterAdapter.convertSkuUnitMapToSkuUnitMapData(skuUnitMapList);
            masterDAO.saveSkuUnitMap(skuUnitMapDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<Supplier> getSupplier(SupplierSearchRequest supplierSearchRequest, boolean includeChilds) throws DcometHealthServiceException {
        List<Supplier> result = null;
        try {
            List<SupplierData> resultData = masterDAO.getSupplier(supplierSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertSupplierDataToSupplier(resultData);
                if (includeChilds) {
                    for (Supplier supplier : result) {
                        SupplierSearchRequest childSearchRequest = new SupplierSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("semSupRID", supplier.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<SupplierEntityMap> supplierEntityMapResult = getSupplierEntityMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(supplierEntityMapResult)) {
                            supplier.setSupplierEntityMapList(supplierEntityMapResult);
                        }
                    }

                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public List<SupplierEntityMap> getSupplierEntityMap(SupplierSearchRequest supplierSearchRequest) throws DcometHealthServiceException {
        List<SupplierEntityMap> result = null;
        try {
            List<SupplierEntityMapData> resultData = masterDAO.getSupplierEntityMap(supplierSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertSupplierEntityMapDataToSupplierEntityMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveSupplier(Supplier supplier, boolean includeChild) throws DcometHealthServiceException {
        try {
            SupplierData supplierData = masterAdapter.convertSupplierToSupplierData(supplier);
            if (includeChild) {
                if (supplier.getSupplierEntityMapList() != null && !supplier.getSupplierEntityMapList().isEmpty()) {
                    List<SupplierEntityMapData> supplierEntityMapDataList = masterAdapter.convertSupplierEntityMapToSupplierEntityMapData(supplier.getSupplierEntityMapList());
                    for (SupplierEntityMapData supplierEntityMapData : supplierEntityMapDataList) {
                        supplierEntityMapData.setSupplierData(supplierData);
                    }
                    supplierData.setSupplierEntityMapData(supplierEntityMapDataList);
                }
            }
            masterDAO.saveSupplier(supplierData);

        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveSupplierEntityMap(List<SupplierEntityMap> supplierEntityMapList) throws DcometHealthServiceException {
        try {
            List<SupplierEntityMapData> supplierEntityMapDataList = masterAdapter.convertSupplierEntityMapToSupplierEntityMapData(supplierEntityMapList);
            masterDAO.saveSupplierEntityMap(supplierEntityMapDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<User> getUser(UserSearchRequest userSearchRequest, boolean includeChild) throws DcometHealthDAOException {
        List<User> result = null;
        try {
            List<UserData> resultData = masterDAO.getUser(userSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertUserDataToUser(resultData);
                if (includeChild) {
                    for (User user : result) {
                        UserSearchRequest childSearchRequest = new UserSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("urUserRID", user.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<UserRoleMap> userRoleMapResult = getUserRoleMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(userRoleMapResult)) {
                            user.setUserRoleMap(userRoleMapResult);
                        }
                    }

                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public UserPhotoData getPhotoById(Integer id) throws DcometHealthServiceException {
        try {
            return masterDAO
                    .getPhotoById(id);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public UserPhotoData getPhotoByUserId(Integer id) throws DcometHealthServiceException {
        try {
            return masterDAO
                    .getPhotoByUserId(id);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public UserPhotoData saveUserPhoto(Integer fkUserId, UserPhotoData photo) throws DcometHealthDAOException {
        try {
            List<UserPhotoData> photos = new ArrayList<>();
            UserPhotoData userPhotoData = masterDAO.getPhotoByUserId(fkUserId);
            if (userPhotoData != null) {
                userPhotoData.setActive("N");
                photos.add(userPhotoData);
            }
            photo.setActive("Y");
            photos.add(photo);
            masterDAO.saveUserPhoto(photos);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return getPhotoByUserId(fkUserId);
    }

    @Override
    public List<Page> getPageLayout(Integer userRid) throws DcometHealthServiceException {
        UserFeatureSearchRequest userFeatureSearchRequest = new UserFeatureSearchRequest();
        List<Criterion> searchCriterionList = new ArrayList<>();
        searchCriterionList.add(Restrictions.eq("ufUserRID", userRid));
        userFeatureSearchRequest.setSearchCriterionList(searchCriterionList);
        List<UserFeature> userFeatureList = getUserFeature(userFeatureSearchRequest);
        List<Page> pageList = convertUserFeatureToPage(userFeatureList);
        Collections.sort(pageList);
        return pageList;
    }

    private List<Page> convertUserFeatureToPage(List<UserFeature> userFeatureList) {

        HashMap<Page, List<Page>> parentMap = new HashMap<>();
        // Add parent
        for (UserFeature userFeature : userFeatureList) {
            if (StringUtils.isEmpty(userFeature.getUfName())) {
                parentMap.put(convertUserFeatureToPage(userFeature), new ArrayList<Page>());
            }
        }
        // Add Child
        for (UserFeature userFeature : userFeatureList) {
            if (StringUtils.isNotEmpty(userFeature.getUfName())) {
                addToParent(userFeature, parentMap);
            }
        }
        // Add childs To Parent
        for (Map.Entry<Page, List<Page>> entry : parentMap.entrySet()) {
            entry.getKey().setSub(CollectionUtils.isNotEmpty(entry.getValue()) ? entry.getValue() : null);
        }
        return new ArrayList<>(parentMap.keySet());
    }

    private void addToParent(UserFeature userFeature, HashMap<Page, List<Page>> parentMap) {
        for (Map.Entry<Page, List<Page>> entry : parentMap.entrySet()) {
            if (Objects.equals(userFeature.getUfParentGroup(), entry.getKey().getUfRid())) {
                entry.getValue().add(convertUserFeatureToPage(userFeature));
            }
        }
    }

    private Page convertUserFeatureToPage(UserFeature userFeature) {
        Page page = new Page();
        page.setId(StringUtils.isNotEmpty(userFeature.getUfName()) ? userFeature.getUfName() : userFeature.getUfCode());
        page.setUfRid(userFeature.getId());
        page.setIcon(StringUtils.isNotEmpty(userFeature.getUfIcon()) ? userFeature.getUfIcon() : null);
        page.setMenuGroup(StringUtils.isNotEmpty(userFeature.getUfGroup()) ? userFeature.getUfGroup() : null);
        page.setLink(StringUtils.isNotEmpty(userFeature.getUfName()) ? userFeature.getUfCode() : null);
        return page;
    }

    @Override
    public List<UserRoleMap> getUserRoleMap(UserSearchRequest userSearchRequest) throws DcometHealthDAOException {
        List<UserRoleMap> result = null;
        try {
            List<UserRoleMapData> resultData = masterDAO.getUserRoleMap(userSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertUserRoleMapDataToUserRoleMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveUser(User user, boolean includeChild) throws DcometHealthDAOException {
        try {
            UserData userData = masterAdapter.convertUserToUserData(user);
            if (userData.getId() != null) {
                if (CollectionUtils.isNotEmpty(user.getUserRoleMap())) {
                    masterDAO.deleteUserRoleMap(userData.getId());
                    masterDAO.deleteUserFeature(userData.getId());
                }
                if (CollectionUtils.isNotEmpty(user.getBoWorkListSettings())) {
                    notificationService.deleteBOWorkListSettings(userData.getId());
                }
            }
            masterDAO.saveUser(userData);
            if (includeChild) {
                List<UserFeature> userFeatureList = new ArrayList<>();
                List<UserRoleMapData> userRoleMapDataList = new ArrayList<>();
                if (CollectionUtils.isNotEmpty(user.getUserRoleMap())) {
                    userRoleMapDataList = masterAdapter.convertUserRoleMapToUserRoleMapData(user.getUserRoleMap());
                    for (UserRoleMapData userRoleMapData : userRoleMapDataList) {
                        userRoleMapData.setUrUserRID(userData.getId());

                        PrivilegeSearchRequest childSearchRequest = new PrivilegeSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("privRoleRID", userRoleMapData.getUrRoleRID()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<Privilege> privilegeResult = getPrivilege(childSearchRequest, true);
                        if (CollectionUtils.isNotEmpty(privilegeResult)) {
                            for (Privilege privilege : privilegeResult) {
                                if (CollectionUtils.isNotEmpty(privilege.getFeature())) {
                                    for (Feature feature : privilege.getFeature()) {
                                        UserFeature userFeature = new UserFeature();
                                        userFeature.setId(feature.getId());
                                        userFeature.setUfCode(feature.getFeatureCode());
                                        userFeature.setUfName(feature.getFeatureName());
                                        userFeature.setUfCommand(feature.getFeatureCommand());
                                        userFeature.setUfGroup("M");
                                        userFeature.setUfGroupDesc("");
                                        userFeature.setUfSeqNum(feature.getFeatureSeqNum());
                                        userFeature.setUfValid(feature.getFeatureValid());
                                        userFeature.setUfParentGroup(feature.getFeatureParentGroup());
                                        userFeature.setUfUserRID(userData.getId());
                                        userFeature.setUfRoleRID(userRoleMapData.getUrRoleRID());
                                        userFeature.setUfEntityRID(user.getEntityRid());
                                        userFeature.setUfIcon(feature.getFeatureIcon());
                                        userFeatureList.add(userFeature);
                                    }
                                }
                            }
                        }
                    }
                    masterDAO.saveUserRoleMap(userRoleMapDataList);
                }

                if (CollectionUtils.isNotEmpty(user.getBoWorkListSettings())) {
                    for (BOWorkListSettings boWorkListSettings : user.getBoWorkListSettings()) {
                        boWorkListSettings.setBowsUserRid(userData.getId());
                        boWorkListSettings.setBowsInsertTime(user.getCurrentDateTimeByUTZ());
                    }
                    notificationService.saveBOWorkListSettings(user.getBoWorkListSettings());
                }

                if (CollectionUtils.isNotEmpty(userFeatureList)) {
                    List<UserFeatureData> userFeatureDataList = masterAdapter.convertUserFeatureToUserFeatureData(userFeatureList);
                    masterDAO.saveUserFeature(userFeatureDataList);
                }

                if (CollectionUtils.isNotEmpty(user.getResource())) {
                    for (Resource resource : user.getResource()) {
                        resource.setCurrentObject(user);
                        resource.setResUserRID(userData.getId());
                        saveResource(resource, includeChild);
                    }
                }

            }

        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveUserRoleMap(List<UserRoleMap> userRoleMapList) throws DcometHealthDAOException {
        try {
            List<UserRoleMapData> userRoleMapDataList = masterAdapter.convertUserRoleMapToUserRoleMapData(userRoleMapList);
            masterDAO.saveUserRoleMap(userRoleMapDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }
//----------------------Privilege---------------------------

    @Override
    public List<Privilege> getPrivilege(PrivilegeSearchRequest privilegeSearchRequest, boolean includeChilds) throws DcometHealthDAOException {
        List<Privilege> result = null;
        try {
            List<PrivilegeData> resultData = masterDAO.getPrivilege(privilegeSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertPrivilegeDataToPrivilege(resultData);
                if (includeChilds) {
                    for (Privilege privilege : result) {
                        FeatureSearchRequest childSearchRequest = new FeatureSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("id", privilege.getPrivFeatureRID()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<Feature> featureResult = dataDictionaryService.getFeature(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(featureResult)) {
                            privilege.setFeature(featureResult);
                        }
                    }

                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

//--------------Unit---------------------
    @Override
    public List<Unit> getUnit(UnitSearchRequest unitSearchRequest) throws DcometHealthDAOException {
        List<Unit> result = null;
        try {
            List<UnitData> resultData = masterDAO.getUnit(unitSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertUnitDataToUnit(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void saveUnit(Unit unit) throws DcometHealthDAOException {
        try {
            UnitData unitData = masterAdapter.convertUnitToUnitData(unit);
            masterDAO.saveUnit(unitData);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    //------StaffUnitMap--------
    @Override
    public List<StaffUnitMap> getStaffUnitMap(StaffSearchRequest staffSearchRequest) throws DcometHealthDAOException {
        List<StaffUnitMap> result = null;
        try {
            List<StaffUnitMapData> resultData = masterDAO.getStaffUnitMap(staffSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertStaffUnitMapDataToStaffUnitMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    //----------------------Staff----------------------------
    @Override
    public List<Staff> getStaff(StaffSearchRequest staffSearchRequest, boolean includeChild) throws DcometHealthServiceException {
        List<Staff> result = null;
        try {
            List<StaffData> resultData = masterDAO.getStaff(staffSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertStaffDataToStaff(resultData);
                if (includeChild) {
                    for (Staff staff : result) {
                        StaffSearchRequest childSearchRequest = new StaffSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("suStaffRID", staff.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<StaffUnitMap> sUnitResult = getStaffUnitMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(sUnitResult)) {
                            staff.setStaffUnitMap(sUnitResult);
                        }
                    }
                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public void saveStaff(Staff staff, boolean includeChild) {
        try {
            StaffData staffData = masterAdapter.convertStaffToStaffData(staff);
            if (staffData.getId() == null) {
                staffData.setStaffEntityRID(staff.getEntityRid());
                AutoNumber autoNumber = dataDictionaryService.getAutoNumberByCategory("STAFF", staff.getEntityRid());
                staffData.setStaffCode(autoNumber.getAutoNumber());
                dataDictionaryService.saveAutoNumberIncrement("STAFF", staff.getEntityRid());
            }
            masterDAO.saveStaff(staffData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(staff.getStaffUnitMap())) {
                    StaffSearchRequest childSearchRequest = new StaffSearchRequest();
                    List<Criterion> searchCriterionList = new ArrayList<>();
                    searchCriterionList.add(Restrictions.eq("suStaffRID", staffData.getId()));
                    childSearchRequest.setSearchCriterionList(searchCriterionList);
                    List<StaffUnitMapData> sUnitResult = masterAdapter.convertStaffUnitMapToStaffUnitMapData(getStaffUnitMap(childSearchRequest));
                    masterDAO.deleteStaffUnitMap(sUnitResult);
                    List<StaffUnitMapData> sUnitDataDataList = masterAdapter.convertStaffUnitMapToStaffUnitMapData(staff.getStaffUnitMap());
                    for (StaffUnitMapData staffUnitMapData : sUnitDataDataList) {
                        staffUnitMapData.setSuStaffRID(staffData.getId());
                    }
                    masterDAO.saveStaffUnitMap(sUnitDataDataList);
                }
            }

        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    //----------------Privilege-----------------------
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void savePrivilege(List<Privilege> privilegeList) throws DcometHealthDAOException {
        try {
            List<PrivilegeData> privilegeDataList = masterAdapter.convertPrivilegeToPrivilegeData(privilegeList);
            masterDAO.savePrivilege(privilegeDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }
//---------------------UserFeature----------------

    @Override
    public List<UserFeature> getUserFeature(UserFeatureSearchRequest userFeatureSearchRequest) throws DcometHealthServiceException {
        List<UserFeature> result = null;
        try {
            List<UserFeatureData> resultData = masterDAO.getUserFeature(userFeatureSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertUserFeatureDataToUserFeature(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public void saveUserFeature(List<UserFeature> userFeatureList
    ) {
        try {
            List<UserFeatureData> userFeatureDataList = masterAdapter.convertUserFeatureToUserFeatureData(userFeatureList);
            masterDAO.saveUserFeature(userFeatureDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    //-----------------UnitTaXMap--------------------------
    @Override
    public List<UnitTaxMap> getUnitTaxMap(UnitTaxMapSearchRequest unitTaxMapSearchRequest) throws DcometHealthServiceException {
        List<UnitTaxMap> result = null;
        try {
            List<UnitTaxMapData> resultData = masterDAO.getUnitTaxMap(unitTaxMapSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertUnitTaxMapDataToUnitTaxMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;

    }

    @Override
    public void saveUnitTaxMap(List<UnitTaxMap> unitTaxMapList
    ) {
        try {
            List<UnitTaxMapData> unitTaxMapDataList = masterAdapter.convertUnitTaxMapToUnitTaxMapData(unitTaxMapList);
            masterDAO.saveUnitTaxMap(unitTaxMapDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<Generic> getGeneric(GenericSearchRequest genericSearchRequest) throws DcometHealthServiceException {
        List<Generic> result = null;
        try {
            List<GenericData> resultData = masterDAO.getGeneric(genericSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertGenericDataToGeneric(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public void saveGeneric(List<Generic> genericList) throws DcometHealthServiceException {
        try {
            List<GenericData> genericDataList = masterAdapter.convertGenericToGenericData(genericList);
            masterDAO.saveGeneric(genericDataList);
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<Resource> getResource(ResourceSearchRequest resourceSearchRequest, boolean includeChilds) throws DcometHealthServiceException {
        List<Resource> result = null;
        try {
            List<ResourceData> resultData = masterDAO.getResource(resourceSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertResourceDataToResource(resultData);
                if (includeChilds) {
                    for (Resource resource : result) {
                        ResourceSearchRequest childSearchRequest = new ResourceSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("availResourceRID", resource.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<ResourceAvailability> resourceAvailabilityResult = getResourceAvailability(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(resourceAvailabilityResult)) {
                            resource.setResourceAvailability(resourceAvailabilityResult);
                        }
                        searchCriterionList.clear();
                        searchCriterionList.add(Restrictions.eq("ruResourceRID", resource.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<ResourceUnitMap> resourceUnitMapResult = getResourceUnitMap(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(resourceUnitMapResult)) {
                            resource.setResourceUnitMap(resourceUnitMapResult);
                        }
                        searchCriterionList.clear();
                        searchCriterionList.add(Restrictions.eq("whResourceRID", resource.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<ResourceWorkingHours> resourceWorkingHoursResult = getResourceWorkingHours(childSearchRequest);
                        if (CollectionUtils.isNotEmpty(resourceWorkingHoursResult)) {
                            resource.setResourceWorkingHours(resourceWorkingHoursResult);
                        }
                    }
                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public void saveResource(Resource resource, boolean includeChild) throws DcometHealthServiceException {
        try {
            ResourceData resourceData = masterAdapter.convertResourceToResourceData(resource);
            masterDAO.saveResource(resourceData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(resource.getResourceAvailability())) {
                    List<ResourceAvailabilityData> resourceSupplierMapDataList = masterAdapter.convertResourceAvailabilityToResourceAvailabilityData(resource.getResourceAvailability());
                    for (ResourceAvailabilityData resourceAvailabilityData : resourceSupplierMapDataList) {
                        resourceAvailabilityData.setAvailResourceRID(resourceData.getId());
                    }
                    masterDAO.saveResourceAvailability(resourceSupplierMapDataList);
                }
                if (CollectionUtils.isNotEmpty(resource.getResourceWorkingHours())) {
                    List<ResourceWorkingHoursData> resourceWorkingHoursDataList = masterAdapter.convertResourceWorkingHoursToResourceWorkingHoursData(resource.getResourceWorkingHours());
                    for (ResourceWorkingHoursData resourceWorkingHoursData : resourceWorkingHoursDataList) {
                        resourceWorkingHoursData.setWhResourceRID(resourceData.getId());
                    }
                    masterDAO.saveResourceWorkingHours(resourceWorkingHoursDataList);
                }
                if (CollectionUtils.isNotEmpty(resource.getResourceUnitMap())) {
                    List<ResourceUnitMapData> resourceUnitMapDataList = masterAdapter.convertResourceUnitMapToResourceUnitMapData(resource.getResourceUnitMap());
                    for (ResourceUnitMapData resourceUnitMapData : resourceUnitMapDataList) {
                        resourceUnitMapData.setRuResourceRID(resourceData.getId());
                    }
                    masterDAO.saveResourceUnitMap(resourceUnitMapDataList);
                }

                if (CollectionUtils.isNotEmpty(resource.getStaff())) {
                    for (Staff staff : resource.getStaff()) {
                        staff.setCurrentObject(resource);
                        staff.setStaffResourceRID(resourceData.getId());
                        staff.setStaffUserRID(resourceData.getResUserRID());
                        saveStaff(staff, includeChild);
                    }
                }

            }

        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<ResourceUnitMap> getResourceUnitMap(ResourceSearchRequest resourceSearchRequest) throws DcometHealthServiceException {
        List<ResourceUnitMap> result = null;
        try {
            List<ResourceUnitMapData> resultData = masterDAO.getResourceUnitMap(resourceSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertResourceUnitMapDataToResourceUnitMap(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public List<ResourceWorkingHours> getResourceWorkingHours(ResourceSearchRequest resourceSearchRequest) throws DcometHealthServiceException {
        List<ResourceWorkingHours> result = null;
        try {
            List<ResourceWorkingHoursData> resultData = masterDAO.getResourceWorkingHours(resourceSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertResourceWorkingHoursDataToResourceWorkingHours(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public List<ResourceAvailability> getResourceAvailability(ResourceSearchRequest resourceSearchRequest) throws DcometHealthServiceException {
        List<ResourceAvailability> result = null;
        try {
            List<ResourceAvailabilityData> resultData = masterDAO.getResourceAvailability(resourceSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertResourceAvailabilityDataToResourceAvailability(resultData);
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

    @Override
    public List<Role> getRole() throws DcometHealthServiceException {
        return masterAdapter.convertRoleDataToRole(masterDAO.getRole());
    }

    @Override
    public List<Role> getRoleByCache() {
        CacheManager cacheManager = CacheManager.getInstance();
        List<Role> list = cacheManager.getAllObjects(Role.class);
        if (CollectionUtils.isNotEmpty(list)) {
            return list;
        } else {
            return getRole();
        }
    }

    @Override
    public void saveRole(Role role, boolean includeChild) throws DcometHealthServiceException {
        try {
            RoleData roleData = masterAdapter.convertRoleToRoleData(role);
            if (roleData.getId() != null) {
                PrivilegeSearchRequest childSearchRequest = new PrivilegeSearchRequest();
                List<Criterion> searchCriterionList = new ArrayList<>();
                searchCriterionList.add(Restrictions.eq("privRoleRID", roleData.getId()));
                childSearchRequest.setSearchCriterionList(searchCriterionList);
                List<PrivilegeData> privilegeDataList = masterAdapter.convertPrivilegeToPrivilegeData(getPrivilege(childSearchRequest, false));
                masterDAO.deletePrivilege(privilegeDataList);
            }
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(role.getPrivilegeList())) {
                    List<PrivilegeData> privilegeDataDataList = masterAdapter.convertPrivilegeToPrivilegeData(role.getPrivilegeList());
                    for (PrivilegeData privilegeData : privilegeDataDataList) {

                        privilegeData.setRoleData(roleData);
                    }
                    roleData.setPrivilegeData(privilegeDataDataList);
                }
            }
            masterDAO.saveRole(roleData);
            if (includeChild) {
                if (CollectionUtils.isNotEmpty(role.getPrivilegeList())) {
                    UserSearchRequest userSearchRequestRole = new UserSearchRequest();
                    List<Criterion> searchCriterionListRole = new ArrayList<>();
                    searchCriterionListRole.add(Restrictions.eq("urRoleRID", roleData.getId()));
                    userSearchRequestRole.setSearchCriterionList(searchCriterionListRole);
                    List<UserRoleMap> userRoleMapList = getUserRoleMap(userSearchRequestRole);
                    for (UserRoleMap userRoleMap : userRoleMapList) {
                        UserSearchRequest userSearchRequestUser = new UserSearchRequest();
                        List<Criterion> searchCriterionListUser = new ArrayList<>();
                        searchCriterionListUser.add(Restrictions.eq("id", userRoleMap.getUrUserRID()));
                        userSearchRequestUser.setSearchCriterionList(searchCriterionListUser);
                        List<User> userList = getUser(userSearchRequestUser, includeChild);
                        for (User user : userList) {
                            user.setBoWorkListSettings(null);
                            saveUser(user, includeChild);
                        }
                    }
                }
            }

        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
    }

    @Override
    public List<Role> getRole(RoleSearchRequest roleSearchRequest, boolean includeChilds) throws DcometHealthServiceException {
        List<Role> result = null;
        try {
            List<RoleData> resultData = masterDAO.getRole(roleSearchRequest);
            if (CollectionUtils.isNotEmpty(resultData)) {
                result = masterAdapter.convertRoleDataToRole(resultData);
                if (includeChilds) {
                    for (Role roles : result) {
                        PrivilegeSearchRequest childSearchRequest = new PrivilegeSearchRequest();
                        List<Criterion> searchCriterionList = new ArrayList<>();
                        searchCriterionList.add(Restrictions.eq("privRoleRID", roles.getId()));
                        childSearchRequest.setSearchCriterionList(searchCriterionList);
                        List<Privilege> privResult = getPrivilege(childSearchRequest, false);
                        if (CollectionUtils.isNotEmpty(privResult)) {
                            roles.setPrivilegeList(privResult);
                        }
                    }
                }
            }
        } catch (DcometHealthDAOException e) {
            throw new DcometHealthServiceException(e);
        } catch (DcometHealthServiceException e) {
            throw e;
        } catch (Exception e) {
            throw new DcometHealthServiceException(e);
        }
        return result;
    }

}
