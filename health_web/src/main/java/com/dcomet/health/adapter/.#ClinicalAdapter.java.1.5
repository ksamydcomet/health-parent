package com.dcomet.health.adapter;

import com.dcomet.fw.util.DateUtil;
import com.dcomet.health.dao.data.ComplaintsData;
import com.dcomet.health.dao.data.ServiceRequestData;
import com.dcomet.health.dao.data.VisitPlanData;
import com.dcomet.health.dao.data.VisitTemplateData;
import com.dcomet.health.dao.data.VisitVitalsData;
import com.dcomet.health.domain.Complaints;
import com.dcomet.fw.exception.DcometServiceException;
import com.dcomet.health.dao.data.AppointmentBookingData;
import com.dcomet.health.dao.data.AppointmentData;
import com.dcomet.health.dao.data.AppointmentReservationData;
import com.dcomet.health.dao.data.AppointmentResourceMapData;
import com.dcomet.health.dao.data.AppointmentTokenData;
import com.dcomet.health.dao.data.DrugRequestDData;
import com.dcomet.health.dao.data.DrugRequestHData;
import com.dcomet.health.dao.data.PatientData;
import com.dcomet.health.dao.data.VisitData;
import com.dcomet.health.domain.Appointment;
import com.dcomet.health.domain.AppointmentBooking;
import com.dcomet.health.domain.AppointmentReservation;
import com.dcomet.health.domain.AppointmentResourceMap;
import com.dcomet.health.domain.AppointmentToken;
import com.dcomet.health.domain.DrugRequestD;
import com.dcomet.health.domain.DrugRequestH;
import com.dcomet.health.domain.Patient;
import java.util.ArrayList;
import java.util.List;
import com.dcomet.health.domain.ServiceRequest;
import com.dcomet.health.domain.Visit;
import com.dcomet.health.domain.VisitPlan;
import com.dcomet.health.domain.VisitTemplate;
import com.dcomet.health.domain.VisitVitals;
import java.util.Calendar;
import org.springframework.stereotype.Component;

@Component("clinicalAdapter")
public class ClinicalAdapter {

    //--------Appointment----------
    public List<Appointment> convertAppointmentDataToAppointment(
            List<AppointmentData> appointmentDataList) throws DcometServiceException {
        List<Appointment> appointmentList = new ArrayList<>();
        for (AppointmentData appointmentData : appointmentDataList) {
            appointmentList.add(convertAppointmentDataToAppointment(appointmentData));
        }
        return appointmentList;
    }

    public List<AppointmentData> convertAppointmentToAppointmentData(
            List<Appointment> appointmentList) throws DcometServiceException {
        List<AppointmentData> appointmentDataList = new ArrayList<>();
        for (Appointment appointment : appointmentList) {
            appointmentDataList.add(convertAppointmentToAppointmentData(appointment));
        }
        return appointmentDataList;
    }

    public Appointment convertAppointmentDataToAppointment(AppointmentData appointmentData)
            throws DcometServiceException {
        Appointment appointment = new Appointment();
        if (appointmentData.getId() != null) {
            appointment.setId(appointmentData.getId());
        }
        if (appointmentData.getApptEntRID() != null) {
            appointment.setEntityRid(appointmentData.getApptEntRID());
        }
        if (appointmentData.getApptUnitRID() != null) {
            appointment.setApptUnitRID(appointmentData.getApptUnitRID());
        }
        if (appointmentData.getApptresType() != null) {
            appointment.setApptresType(appointmentData.getApptresType());
        }
        if (appointmentData.getApptvisitRID() != null) {
            appointment.setApptvisitRID(appointmentData.getApptvisitRID());
        }
        if (appointmentData.getApptUserNum() != null) {
            appointment.setApptUserNum(appointmentData.getApptUserNum());
        }
        if (appointmentData.getApptType() != null) {
            appointment.setApptType(appointmentData.getApptType());
        }
        if (appointmentData.getApptStatus() != null) {
            appointment.setApptStatus(appointmentData.getApptStatus());
        }
        if (appointmentData.getApptToken() != null) {
            appointment.setApptToken(appointmentData.getApptToken());
        }
        if (appointmentData.getApptFromDate() != null) {
            appointment.setApptFromDate(DateUtil.convertDateToString(appointmentData.getApptFromDate()));
        }
        if (appointmentData.getApptFromTime() != null) {
            appointment.setApptFromTime(appointmentData.getApptFromTime());
        }
        if (appointmentData.getApptArrivedTime() != null) {
            appointment.setApptArrivedTime(appointmentData.getApptArrivedTime());
        }
        if (appointmentData.getApptInprogressTime() != null) {
            appointment.setApptInprogressTime(appointmentData.getApptInprogressTime());
        }
        if (appointmentData.getApptCompletedTime() != null) {
            appointment.setApptCompletedTime(appointmentData.getApptCompletedTime());
        }
        if (appointmentData.getApptBilledTime() != null) {
            appointment.setApptBilledTime(appointmentData.getApptBilledTime());
        }
        if (appointmentData.getApptOrderRID() != null) {
            appointment.setApptOrderRID(appointmentData.getApptOrderRID());
        }
        if (appointmentData.getApptDuration() != null) {
            appointment.setApptDuration(appointmentData.getApptDuration());
        }
        if (appointmentData.getApptServiceRID() != null) {
            appointment.setApptServiceRID(appointmentData.getApptServiceRID());
        }
        if (appointmentData.getApptToDate() != null) {
            appointment.setApptToDate(DateUtil.convertDateToString(appointmentData.getApptToDate()));
        }
        if (appointmentData.getApptToTime() != null) {
            appointment.setApptToTime(appointmentData.getApptToTime());
        }
        if (appointmentData.getApptServiceName() != null) {
            appointment.setApptServiceName(appointmentData.getApptServiceName());
        }
        if (appointmentData.getApptServicePointRID() != null) {
            appointment.setApptServicePointRID(appointmentData.getApptServicePointRID());
        }
        if (appointmentData.getApptServicePointName() != null) {
            appointment.setApptServicePointName(appointmentData.getApptServicePointName());
        }
        if (appointmentData.getApptServiceProviderRID() != null) {
            appointment.setApptServiceProviderRID(appointmentData.getApptServiceProviderRID());
        }
        if (appointmentData.getApptServiceProviderName() != null) {
            appointment.setApptServiceProviderName(appointmentData.getApptServiceProviderName());
        }
        if (appointmentData.getApptPatientRID() != null) {
            appointment.setApptPatientRID(appointmentData.getApptPatientRID());
        }
        if (appointmentData.getApptPatientName() != null) {
            appointment.setApptPatientName(appointmentData.getApptPatientName());
        }
        if (appointmentData.getApptPatientPhone() != null) {
            appointment.setApptPatientPhone(appointmentData.getApptPatientPhone());
        }
        if (appointmentData.getApptPatientMrn() != null) {
            appointment.setApptPatientMrn(appointmentData.getApptPatientMrn());
        }
        if (appointmentData.getApptFromDateTime() != null) {
            appointment.setApptFromDateTime(DateUtil.convertCalendarToString(appointmentData.getApptFromDateTime()));
        }
        if (appointmentData.getApptToDateTime() != null) {
            appointment.setApptToDateTime(DateUtil.convertCalendarToString(appointmentData.getApptToDateTime()));
        }
        if (appointmentData.getApptBookingNumber() != null) {
            appointment.setApptBookingNumber(appointmentData.getApptBookingNumber());
        }
        if (appointmentData.getApptVisitStatus() != null) {
            appointment.setApptVisitStatus(appointmentData.getApptVisitStatus());
        }
        if (appointmentData.getApptOrders() != null) {
            appointment.setApptOrders(appointmentData.getApptOrders());
        }
        if (appointmentData.getApptCancelReason() != null) {
            appointment.setApptCancelReason(appointmentData.getApptCancelReason());
        }
        if (appointmentData.getApptIsFollowUpDone() != null) {
            appointment.setApptIsFollowUpDone(appointmentData.getApptIsFollowUpDone());
        }
        if (appointmentData.getApptIsLockAcquired() != null) {
            appointment.setApptIsLockAcquired(appointmentData.getApptIsLockAcquired());
        }
        if (appointmentData.getApptRemarks() != null) {
            appointment.setApptRemarks(appointmentData.getApptRemarks());
        }
        if (appointmentData.getCreatedUserRid() != null) {
            appointment.setCreatedUserRid(appointmentData.getCreatedUserRid());
        }
        if (appointmentData.getCreatedDateTime() != null) {
            appointment.setCreatedDateTime(DateUtil.convertCalendarToString(appointmentData.getCreatedDateTime()));
        }
        if (appointmentData.getModifiedUserRid() != null) {
            appointment.setModifiedUserRid(appointmentData.getModifiedUserRid());
        }
        if (appointmentData.getModifiedDateTime() != null) {
            appointment.setModifiedDateTime(DateUtil.convertCalendarToString(appointmentData.getModifiedDateTime()));
        }
        if (appointmentData.getApptCreatedUnitRID() != null) {
            appointment.setApptCreatedUnitRID(appointmentData.getApptCreatedUnitRID());
        }
        return appointment;
    }

    public AppointmentData convertAppointmentToAppointmentData(Appointment appointment)
            throws DcometServiceException {
        AppointmentData appointmentData = new AppointmentData();
        if (appointment.getId() != null) {
            appointmentData.setId(appointment.getId());
        }
        if (appointment.getEntityRid() != null) {
            appointmentData.setApptEntRID(appointment.getEntityRid());
        }
        if (appointment.getApptUnitRID() != null) {
            appointmentData.setApptUnitRID(appointment.getApptUnitRID());
        }
        if (appointment.getApptresType() != null) {
            appointmentData.setApptresType(appointment.getApptresType());
        }
        if (appointment.getApptvisitRID() != null) {
            appointmentData.setApptvisitRID(appointment.getApptvisitRID());
        }
        if (appointment.getApptUserNum() != null) {
            appointmentData.setApptUserNum(appointment.getApptUserNum());
        }
        if (appointment.getApptType() != null) {
            appointmentData.setApptType(appointment.getApptType());
        }
        if (appointment.getApptStatus() != null) {
            appointmentData.setApptStatus(appointment.getApptStatus());
        }
        if (appointment.getApptToken() != null) {
            appointmentData.setApptToken(appointment.getApptToken());
        }
        if (appointment.getApptFromDate() != null) {
            appointmentData.setApptFromDate(DateUtil.convertStringToDate(appointment.getApptFromDate()));
        }
        if (appointment.getApptFromTime() != null) {
            appointmentData.setApptFromTime(appointment.getApptFromTime());
        }
        if (appointment.getApptArrivedTime() != null) {
            appointmentData.setApptArrivedTime(appointment.getApptArrivedTime());
        }
        if (appointment.getApptInprogressTime() != null) {
            appointmentData.setApptInprogressTime(appointment.getApptInprogressTime());
        }
        if (appointment.getApptCompletedTime() != null) {
            appointmentData.setApptCompletedTime(appointment.getApptCompletedTime());
        }
        if (appointment.getApptBilledTime() != null) {
            appointmentData.setApptBilledTime(appointment.getApptBilledTime());
        }
        if (appointment.getApptOrderRID() != null) {
            appointmentData.setApptOrderRID(appointment.getApptOrderRID());
        }
        if (appointment.getApptDuration() != null) {
            appointmentData.setApptDuration(appointment.getApptDuration());
        }
        if (appointment.getApptServiceRID() != null) {
            appointmentData.setApptServiceRID(appointment.getApptServiceRID());
        }
        if (appointment.getApptToDate() != null) {
            appointmentData.setApptToDate(DateUtil.convertStringToDate(appointment.getApptToDate()));
        }
        if (appointment.getApptToTime() != null) {
            appointmentData.setApptToTime(appointment.getApptToTime());
        }
        if (appointment.getApptServiceName() != null) {
            appointmentData.setApptServiceName(appointment.getApptServiceName());
        }
        if (appointment.getApptServicePointRID() != null) {
            appointmentData.setApptServicePointRID(appointment.getApptServicePointRID());
        }
        if (appointment.getApptServicePointName() != null) {
            appointmentData.setApptServicePointName(appointment.getApptServicePointName());
        }
        if (appointment.getApptServiceProviderRID() != null) {
            appointmentData.setApptServiceProviderRID(appointment.getApptServiceProviderRID());
        }
        if (appointment.getApptServiceProviderName() != null) {
            appointmentData.setApptServiceProviderName(appointment.getApptServiceProviderName());
        }
        if (appointment.getApptPatientRID() != null) {
            appointmentData.setApptPatientRID(appointment.getApptPatientRID());
        }
        if (appointment.getApptPatientName() != null) {
            appointmentData.setApptPatientName(appointment.getApptPatientName());
        }
        if (appointment.getApptPatientPhone() != null) {
            appointmentData.setApptPatientPhone(appointment.getApptPatientPhone());
        }
        if (appointment.getApptPatientMrn() != null) {
            appointmentData.setApptPatientMrn(appointment.getApptPatientMrn());
        }
        if (appointment.getApptFromDateTime() != null) {
            appointmentData.setApptFromDateTime(DateUtil.convertStringToCalendar(appointment.getApptFromDateTime()));
        }
        if (appointment.getApptToDateTime() != null) {
            appointmentData.setApptToDateTime(DateUtil.convertStringToCalendar(appointment.getApptToDateTime()));
        }
        if (appointment.getCreatedUserRid() != null) {
            appointmentData.setCreatedUserRid(appointment.getCreatedUserRid());
        }
        if (appointment.getModifiedUserRid() != null) {
            appointmentData.setModifiedUserRid(appointment.getModifiedUserRid());
        }
        if (appointment.getApptBookingNumber() != null) {
            appointmentData.setApptBookingNumber(appointment.getApptBookingNumber());
        }
        if (appointment.getApptVisitStatus() != null) {
            appointmentData.setApptVisitStatus(appointment.getApptVisitStatus());
        }
        if (appointment.getApptOrders() != null) {
            appointmentData.setApptOrders(appointment.getApptOrders());
        }
        if (appointment.getApptCancelReason() != null) {
            appointmentData.setApptCancelReason(appointment.getApptCancelReason());
        }
        if (appointment.getApptIsFollowUpDone() != null) {
            appointmentData.setApptIsFollowUpDone(appointment.getApptIsFollowUpDone());
        }
        if (appointment.getApptIsLockAcquired() != null) {
            appointmentData.setApptIsLockAcquired(appointment.getApptIsLockAcquired());
        }
        if (appointment.getApptAttendingUserRID() != null) {
            appointmentData.setApptAttendingUserRID(appointment.getApptAttendingUserRID());
        }
        if (appointment.getApptRemarks() != null) {
            appointmentData.setApptRemarks(appointment.getApptRemarks());
        }
        if (appointment.getApptCreatedUnitRID() != null) {
            appointmentData.setApptCreatedUnitRID(appointment.getApptCreatedUnitRID());
        }

        return appointmentData;
    }

    //----------AppointmentBooking--------------
    public List<AppointmentBooking> convertAppointmentBookingDataToAppointmentBooking(
            List<AppointmentBookingData> resultData) throws DcometServiceException {
        List<AppointmentBooking> result = new ArrayList<>();
        for (AppointmentBookingData child1Data : resultData) {
            result.add(convertAppointmentBookingDataToAppointmentBooking(child1Data));
        }
        return result;
    }

    public List<AppointmentBookingData> convertAppointmentBookingToAppointmentBookingData(List<AppointmentBooking> appointmentBookingList)
            throws DcometServiceException {
        List<AppointmentBookingData> appointmentBookingDataList = new ArrayList<>();
        for (AppointmentBooking appointmentBooking : appointmentBookingList) {
            appointmentBookingDataList.add(convertAppointmentBookingToAppointmentBookingData(appointmentBooking));
        }
        return appointmentBookingDataList;
    }

    public AppointmentBooking convertAppointmentBookingDataToAppointmentBooking(AppointmentBookingData appointmentBookingData)
            throws DcometServiceException {
        AppointmentBooking appointmentBooking = new AppointmentBooking();
        if (appointmentBookingData.getId() != null) {
            appointmentBooking.setId(appointmentBookingData.getId());
        }
        if (appointmentBookingData.getBookingUnitRid() != null) {
            appointmentBooking.setBookingUnitRid(appointmentBookingData.getBookingUnitRid());
        }
        if (appointmentBookingData.getBookinDate() != null) {
            appointmentBooking.setBookinDate(DateUtil.convertDateToString(appointmentBookingData.getBookinDate()));
        }
        if (appointmentBookingData.getBookingSeqNumber() != null) {
            appointmentBooking.setBookingSeqNumber(appointmentBookingData.getBookingSeqNumber());
        }
        if (appointmentBookingData.getCreatedUserRid() != null) {
            appointmentBooking.setCreatedUserRid(appointmentBookingData.getCreatedUserRid());
        }
        if (appointmentBookingData.getCreatedDateTime() != null) {
            appointmentBooking.setCreatedDateTime(DateUtil.convertCalendarToString(appointmentBookingData.getCreatedDateTime()));
        }
        if (appointmentBookingData.getModifiedUserRid() != null) {
            appointmentBooking.setModifiedUserRid(appointmentBookingData.getModifiedUserRid());
        }
        if (appointmentBookingData.getModifiedDateTime() != null) {
            appointmentBooking.setModifiedDateTime(DateUtil.convertCalendarToString(appointmentBookingData.getModifiedDateTime()));
        }
        return appointmentBooking;
    }

    public AppointmentBookingData convertAppointmentBookingToAppointmentBookingData(AppointmentBooking appointmentBooking)
            throws DcometServiceException {
        AppointmentBookingData appointmentBookingData = new AppointmentBookingData();
        if (appointmentBooking.getId() != null) {
            appointmentBookingData.setId(appointmentBooking.getId());
        }
        if (appointmentBooking.getBookingUnitRid() != null) {
            appointmentBookingData.setBookingUnitRid(appointmentBooking.getBookingUnitRid());
        }
        if (appointmentBooking.getBookinDate() != null) {
            appointmentBookingData.setBookinDate(DateUtil.convertStringToDate(appointmentBooking.getBookinDate()));
        }
        if (appointmentBooking.getBookingSeqNumber() != null) {
            appointmentBookingData.setBookingSeqNumber(appointmentBooking.getBookingSeqNumber());
        }
        if (appointmentBooking.getCreatedUserRid() != null) {
            appointmentBookingData.setCreatedUserRid(appointmentBooking.getCreatedUserRid());
        }
        if (appointmentBooking.getModifiedUserRid() != null) {
            appointmentBookingData.setModifiedUserRid(appointmentBooking.getModifiedUserRid());
        }
        return appointmentBookingData;
    }

    //---------Appointment Reservation----------
    public List<AppointmentReservation> convertAppointmentReservationDataToAppointmentReservation(
            List<AppointmentReservationData> resultData) throws DcometServiceException {
        List<AppointmentReservation> result = new ArrayList<>();
        for (AppointmentReservationData child1Data : resultData) {
            result.add(convertAppointmentReservationDataToAppointmentReservation(child1Data));
        }
        return result;
    }

    public List<AppointmentReservationData> convertAppointmentReservationToAppointmentReservationData(List<AppointmentReservation> appointmentReservationList)
            throws DcometServiceException {
        List<AppointmentReservationData> appointmentReservationDataList = new ArrayList<>();
        for (AppointmentReservation appointmentReservation : appointmentReservationList) {
            appointmentReservationDataList.add(convertAppointmentReservationToAppointmentReservationData(appointmentReservation));
        }
        return appointmentReservationDataList;
    }

    public AppointmentReservation convertAppointmentReservationDataToAppointmentReservation(AppointmentReservationData appointmentReservationData)
            throws DcometServiceException {
        AppointmentReservation appointmentReservation = new AppointmentReservation();
        if (appointmentReservationData.getId() != null) {
            appointmentReservation.setId(appointmentReservationData.getId());
        }
        if (appointmentReservationData.getRsvResourceRID() != null) {
            appointmentReservation.setRsvResourceRID(appointmentReservationData.getRsvResourceRID());
        }
        if (appointmentReservationData.getRsvReservationType() != null) {
            appointmentReservation.setRsvReservationType(appointmentReservationData.getRsvReservationType());
        }
        if (appointmentReservationData.getRsvReservedForRid() != null) {
            appointmentReservation.setRsvReservedForRid(appointmentReservationData.getRsvReservedForRid());
        }
        if (appointmentReservationData.getRsvReservedForRid() != null) {
            appointmentReservation.setRsvReservedForRid(appointmentReservationData.getRsvReservedForRid());
        }
        if (appointmentReservationData.getRsvReservedForName() != null) {
            appointmentReservation.setRsvReservedForName(appointmentReservationData.getRsvReservedForName());
        }
        if (appointmentReservationData.getRsvReservedSlotValue() != null) {
            appointmentReservation.setRsvReservedSlotValue(appointmentReservationData.getRsvReservedSlotValue());
        }
        if (appointmentReservationData.getRsvFromDateTime() != null) {
            appointmentReservation.setRsvFromDateTime(DateUtil.convertCalendarToString(appointmentReservationData.getRsvFromDateTime()));
        }
        if (appointmentReservationData.getRsvToDateTime() != null) {
            appointmentReservation.setRsvToDateTime(DateUtil.convertCalendarToString(appointmentReservationData.getRsvToDateTime()));
        }
        if (appointmentReservationData.getRsvRemarks() != null) {
            appointmentReservation.setRsvRemarks(appointmentReservationData.getRsvRemarks());
        }
        if (appointmentReservationData.getCreatedUserRid() != null) {
            appointmentReservation.setCreatedUserRid(appointmentReservationData.getCreatedUserRid());
        }
        if (appointmentReservationData.getCreatedDateTime() != null) {
            appointmentReservation.setCreatedDateTime(DateUtil.convertCalendarToString(appointmentReservationData.getCreatedDateTime()));
        }
        if (appointmentReservationData.getModifiedUserRid() != null) {
            appointmentReservation.setModifiedUserRid(appointmentReservationData.getModifiedUserRid());
        }
        if (appointmentReservationData.getModifiedDateTime() != null) {
            appointmentReservation.setModifiedDateTime(DateUtil.convertCalendarToString(appointmentReservationData.getModifiedDateTime()));
        }
        return appointmentReservation;
    }

    public AppointmentReservationData convertAppointmentReservationToAppointmentReservationData(AppointmentReservation appointmentReservation)
            throws DcometServiceException {
        AppointmentReservationData appointmentReservationData = new AppointmentReservationData();
        if (appointmentReservation.getId() != null) {
            appointmentReservationData.setId(appointmentReservation.getId());
        }
        if (appointmentReservation.getRsvResourceRID() != null) {
            appointmentReservationData.setRsvResourceRID(appointmentReservation.getRsvResourceRID());
        }
        if (appointmentReservation.getRsvReservationType() != null) {
            appointmentReservationData.setRsvReservationType(appointmentReservation.getRsvReservationType());
        }
        if (appointmentReservation.getRsvReservedForRid() != null) {
            appointmentReservationData.setRsvReservedForRid(appointmentReservation.getRsvReservedForRid());
        }
        if (appointmentReservation.getRsvReservedForName() != null) {
            appointmentReservationData.setRsvReservedForName(appointmentReservation.getRsvReservedForName());
        }
        if (appointmentReservation.getRsvReservedSlotValue() != null) {
            appointmentReservationData.setRsvReservedSlotValue(appointmentReservation.getRsvReservedSlotValue());
        }
        if (appointmentReservation.getRsvFromDateTime() != null) {
            appointmentReservationData.setRsvFromDateTime(DateUtil.convertStringToCalendar(appointmentReservation.getRsvFromDateTime()));
        }
        if (appointmentReservation.getRsvToDateTime() != null) {
            appointmentReservationData.setRsvToDateTime(DateUtil.convertStringToCalendar(appointmentReservation.getRsvToDateTime()));
        }
        if (appointmentReservation.getId() != null) {
            appointmentReservationData.setId(appointmentReservation.getId());
        }
        if (appointmentReservation.getRsvRemarks() != null) {
            appointmentReservationData.setRsvRemarks(appointmentReservation.getRsvRemarks());
        }
        if (appointmentReservation.getCreatedUserRid() != null) {
            appointmentReservationData.setCreatedUserRid(appointmentReservation.getCreatedUserRid());
        }
        if (appointmentReservation.getModifiedUserRid() != null) {
            appointmentReservationData.setModifiedUserRid(appointmentReservation.getModifiedUserRid());
        }
        return appointmentReservationData;
    }

    public List<AppointmentResourceMap> convertAppointmentResourceMapDataToAppointmentResourceMap(
            List<AppointmentResourceMapData> resultData) throws DcometServiceException {
        List<AppointmentResourceMap> result = new ArrayList<>();
        for (AppointmentResourceMapData child1Data : resultData) {
            result.add(convertAppointmentResourceMapDataToAppointmentResourceMap(child1Data));
        }
        return result;
    }

    public List<AppointmentResourceMapData> convertAppointmentResourceMapToAppointmentResourceMapData(List<AppointmentResourceMap> appointmentResourceMapList)
            throws DcometServiceException {
        List<AppointmentResourceMapData> appointmentResourceMapDataList = new ArrayList<>();
        for (AppointmentResourceMap appointmentResourceMap : appointmentResourceMapList) {
            appointmentResourceMapDataList.add(convertAppointmentResourceMapToAppointmentResourceMapData(appointmentResourceMap));
        }
        return appointmentResourceMapDataList;
    }

    public AppointmentResourceMap convertAppointmentResourceMapDataToAppointmentResourceMap(AppointmentResourceMapData appointmentResourceMapData)
            throws DcometServiceException {
        AppointmentResourceMap appointmentResourceMap = new AppointmentResourceMap();
        if (appointmentResourceMapData.getId() != null) {
            appointmentResourceMap.setId(appointmentResourceMapData.getId());
        }
        if (appointmentResourceMapData.getArmApptRid() != null) {
            appointmentResourceMap.setArmApptRid(appointmentResourceMapData.getArmApptRid());
        }
        if (appointmentResourceMapData.getArmResourceRid() != null) {
            appointmentResourceMap.setArmResourceRid(appointmentResourceMapData.getArmResourceRid());
        }

        return appointmentResourceMap;
    }

    public AppointmentResourceMapData convertAppointmentResourceMapToAppointmentResourceMapData(AppointmentResourceMap appointmentResourceMap)
            throws DcometServiceException {
        AppointmentResourceMapData appointmentResourceMapData = new AppointmentResourceMapData();
        if (appointmentResourceMap.getId() != null) {
            appointmentResourceMapData.setId(appointmentResourceMap.getId());
        }
        if (appointmentResourceMap.getArmApptRid() != null) {
            appointmentResourceMapData.setArmApptRid(appointmentResourceMap.getArmApptRid());
        }
        if (appointmentResourceMap.getArmResourceRid() != null) {
            appointmentResourceMapData.setArmResourceRid(appointmentResourceMap.getArmResourceRid());
        }

        return appointmentResourceMapData;
    }
//-----------AppointmentToken-----------

    public List<AppointmentToken> convertAppointmentTokenDataToAppointmentToken(
            List<AppointmentTokenData> resultData) throws DcometServiceException {
        List<AppointmentToken> result = new ArrayList<>();
        for (AppointmentTokenData child1Data : resultData) {
            result.add(convertAppointmentTokenDataToAppointmentToken(child1Data));
        }
        return result;
    }

    public List<AppointmentTokenData> convertAppointmentTokenToAppointmentTokenData(List<AppointmentToken> appointmentTokenList)
            throws DcometServiceException {
        List<AppointmentTokenData> appointmentTokenDataList = new ArrayList<>();
        for (AppointmentToken appointmentToken : appointmentTokenList) {
            appointmentTokenDataList.add(convertAppointmentTokenToAppointmentTokenData(appointmentToken));
        }
        return appointmentTokenDataList;
    }

    public AppointmentToken convertAppointmentTokenDataToAppointmentToken(AppointmentTokenData appointmentResourceMapData)
            throws DcometServiceException {
        AppointmentToken appointmentResourceMap = new AppointmentToken();
        if (appointmentResourceMapData.getId() != null) {
            appointmentResourceMap.setId(appointmentResourceMapData.getId());
        }
        if (appointmentResourceMapData.getTokenUnitRID() != null) {
            appointmentResourceMap.setTokenUnitRID(appointmentResourceMapData.getTokenUnitRID());
        }
        if (appointmentResourceMapData.getTokenDate() != null) {
            appointmentResourceMap.setTokenDate(DateUtil.convertDateToString(appointmentResourceMapData.getTokenDate()));
        }
        if (appointmentResourceMapData.getTokenNumber() != null) {
            appointmentResourceMap.setTokenNumber(appointmentResourceMapData.getTokenNumber());
        }

        return appointmentResourceMap;
    }

    public AppointmentTokenData convertAppointmentTokenToAppointmentTokenData(AppointmentToken appointmentResourceMap)
            throws DcometServiceException {
        AppointmentTokenData appointmentResourceMapData = new AppointmentTokenData();
        if (appointmentResourceMap.getId() != null) {
            appointmentResourceMapData.setId(appointmentResourceMap.getId());
        }
        if (appointmentResourceMap.getTokenUnitRID() != null) {
            appointmentResourceMapData.setTokenUnitRID(appointmentResourceMap.getTokenUnitRID());
        }
        if (appointmentResourceMap.getTokenDate() != null) {
            appointmentResourceMapData.setTokenDate(DateUtil.convertStringToDate(appointmentResourceMap.getTokenDate()));
        }
        if (appointmentResourceMap.getTokenNumber() != null) {
            appointmentResourceMapData.setTokenNumber(appointmentResourceMap.getTokenNumber());
        }

        return appointmentResourceMapData;
    }

    //----------------------Patient------------------------    
    public List<Patient> convertPatientDataToPatient(
            List<PatientData> resultData) throws DcometServiceException {
        List<Patient> patientList = new ArrayList<>();
        for (PatientData patientData : resultData) {
            patientList.add(convertPatientDataToPatient(patientData));
        }
        return patientList;
    }

    public List<PatientData> convertPatientToPatientData(List<Patient> patientList)
            throws DcometServiceException {
        List<PatientData> patientDataList = new ArrayList<>();
        for (Patient patient : patientList) {
            patientDataList.add(convertPatientToPatientData(patient));
        }
        return patientDataList;
    }

    public Patient convertPatientDataToPatient(PatientData patientData)
            throws DcometServiceException {
        Patient patient = new Patient();
        if (patientData.getId() != null) {
            patient.setId(patientData.getId());
        }
        if (patientData.getPatMrnNo() != null) {
            patient.setPatMrnNo(patientData.getPatMrnNo());
        }
        if (patientData.getPatEntRid() != null) {
            patient.setEntityRid(patientData.getPatEntRid());
        }
        if (patientData.getPatSeqNo() != null) {
            patient.setPatSeqNo(patientData.getPatSeqNo());
        }
        if (patientData.getPatRegDate() != null) {
            patient.setPatRegDate(DateUtil.convertDateToString(patientData.getPatRegDate()));
        }
        if (patientData.getPatTitle() != null) {
            patient.setPatTitle(patientData.getPatTitle());
        }
        if (patientData.getPatName() != null) {
            patient.setPatName(patientData.getPatName());
        }
        if (patientData.getPatFullName() != null) {
            patient.setPatFullName(patientData.getPatFullName());
        }
        if (patientData.getPatFamilyName() != null) {
            patient.setPatFamilyName(patientData.getPatFamilyName());
        }
        if (patientData.getPatGenderIndex() != null) {
            patient.setPatGenderIndex(patientData.getPatGenderIndex());
            patient.setPatGender((patient.getPatGenderIndex()).equals("1")
                    ? "Male" : (patient.getPatGenderIndex()).equals("2") ? "Female" : "Trangender");
        }
        if (patientData.getPatBloodGroupIndex() != null) {
            patient.setPatBloodGroupIndex(patientData.getPatBloodGroupIndex());
        }
        if (patientData.getPatDob() != null) {
            patient.setPatDob(DateUtil.convertDateToString(patientData.getPatDob()));

            Calendar.getInstance().setTime(DateUtil.convertStringToDate(patient.getPatDob()));
            Calendar cal = Calendar.getInstance();
            cal.setTime(DateUtil.convertStringToDate(DateUtil.getCurrentDate()));
            Calendar cal1 = Calendar.getInstance();
            cal1.setTime(DateUtil.convertStringToDate(patient.getPatDob()));
            patient.setPatAge(cal.get(Calendar.YEAR) - cal1.get(Calendar.YEAR));
        }
        if (patientData.getPatMaritalStatus() != null) {
            patient.setPatMaritalStatus(patientData.getPatMaritalStatus());
        }
        if (patientData.getPatAddress() != null) {
            patient.setPatAddress(patientData.getPatAddress());
        }
        if (patientData.getPatCityIndex() != null) {
            patient.setPatCityIndex(patientData.getPatCityIndex());
        }
        if (patientData.getPatStateIndex() != null) {
            patient.setPatStateIndex(patientData.getPatStateIndex());
        }
        if (patientData.getPatCountryIndex() != null) {
            patient.setPatCountryIndex(patientData.getPatCountryIndex());
        }
        if (patientData.getPatPincode() != null) {
            patient.setPatPincode(patientData.getPatPincode());
        }
        if (patientData.getPatPhoneNo() != null) {
            patient.setPatPhoneNo(patientData.getPatPhoneNo());
        }
        if (patientData.getPatEmailId() != null) {
            patient.setPatEmailId(patientData.getPatEmailId());
        }
        if (patientData.getPatPhotoFilePath() != null) {
            patient.setPatPhotoFilePath(patientData.getPatPhotoFilePath());
        }
        if (patientData.getPatPhotoFileType() != null) {
            patient.setPatPhotoFileType(patientData.getPatPhotoFileType());
        }
        if (patientData.getPatVipStatus() != null) {
            patient.setPatVipStatus(patientData.getPatVipStatus());
        }
        if (patientData.getPatParentRid() != null) {
            patient.setPatParentRid(patientData.getPatParentRid());
        }
        if (patientData.getPatGeneratedDob() != null) {
            patient.setPatGeneratedDob(DateUtil.convertDateToString(patientData.getPatGeneratedDob()));
        }
        if (patientData.getPatRowInvalidated() != null) {
            patient.setPatRowInvalidated(patientData.getPatRowInvalidated());
        }
        if (patientData.getPatRowInvalidatedDateTime() != null) {
            patient.setPatRowInvalidatedDateTime(DateUtil.convertCalendarToString(patientData.getPatRowInvalidatedDateTime()));
        }
        if (patientData.getPatState() != null) {
            patient.setPatState(patientData.getPatState());
        }
        if (patientData.getPatStatus() != null) {
            patient.setPatStatus(patientData.getPatStatus());
        }
        if (patientData.getCreatedDateTime() != null) {
            patient.setCreatedDateTime(DateUtil.convertCalendarToString(patientData.getCreatedDateTime()));
        }
        if (patientData.getCreatedUserRid() != null) {
            patient.setCreatedUserRid(patientData.getCreatedUserRid());
        }
        if (patientData.getModifiedDateTime() != null) {
            patient.setModifiedDateTime(DateUtil.convertCalendarToString(patientData.getModifiedDateTime()));
        }
        if (patientData.getModifiedUserRid() != null) {
            patient.setModifiedUserRid(patientData.getModifiedUserRid());
        }

        return patient;
    }

    public PatientData convertPatientToPatientData(Patient patient)
            throws DcometServiceException {
        PatientData patientData = new PatientData();
        if (patient.getId() != null) {
            patientData.setId(patient.getId());
        }
        if (patient.getPatMrnNo() != null) {
            patientData.setPatMrnNo(patient.getPatMrnNo());
        }
        if (patient.getEntityRid() != null) {
            patientData.setPatEntRid(patient.getEntityRid());
        }
        if (patient.getPatSeqNo() != null) {
            patientData.setPatSeqNo(patient.getPatSeqNo());
        }
        if (patient.getPatRegDate() != null) {
            patientData.setPatRegDate(DateUtil.convertStringToDate(patient.getPatRegDate()));
        }
        if (patient.getPatTitle() != null) {
            patientData.setPatTitle(patient.getPatTitle());
        }
        if (patient.getPatName() != null) {
            patientData.setPatName(patient.getPatName());
        }
        if (patient.getPatFullName() != null) {
            patientData.setPatFullName(patient.getPatFullName());
        }
        if (patient.getPatFamilyName() != null) {
            patientData.setPatFamilyName(patient.getPatFamilyName());
        }
        if (patient.getPatGenderIndex() != null) {
            patientData.setPatGenderIndex(patient.getPatGenderIndex());
        }
        if (patient.getPatBloodGroupIndex() != null) {
            patientData.setPatBloodGroupIndex(patient.getPatBloodGroupIndex());
        }
        if (patient.getPatDob() != null) {
            patientData.setPatDob(DateUtil.convertStringToDate(patient.getPatDob()));
        }
        if (patient.getPatMaritalStatus() != null) {
            patientData.setPatMaritalStatus(patient.getPatMaritalStatus());
        }
        if (patient.getPatAddress() != null) {
            patientData.setPatAddress(patient.getPatAddress());
        }
        if (patient.getPatCityIndex() != null) {
            patientData.setPatCityIndex(patient.getPatCityIndex());
        }
        if (patient.getPatStateIndex() != null) {
            patientData.setPatStateIndex(patient.getPatStateIndex());
        }
        if (patient.getPatCountryIndex() != null) {
            patientData.setPatCountryIndex(patient.getPatCountryIndex());
        }
        if (patient.getPatPincode() != null) {
            patientData.setPatPincode(patient.getPatPincode());
        }
        if (patient.getPatPhoneNo() != null) {
            patientData.setPatPhoneNo(patient.getPatPhoneNo());
        }
        if (patient.getPatEmailId() != null) {
            patientData.setPatEmailId(patient.getPatEmailId());
        }
        if (patient.getPatPhotoFilePath() != null) {
            patientData.setPatPhotoFilePath(patient.getPatPhotoFilePath());
        }
        if (patient.getPatPhotoFileType() != null) {
            patientData.setPatPhotoFileType(patient.getPatPhotoFileType());
        }
        if (patient.getPatVipStatus() != null) {
            patientData.setPatVipStatus(patient.getPatVipStatus());
        }
        if (patient.getPatParentRid() != null) {
            patientData.setPatParentRid(patient.getPatParentRid());
        }
        if (patient.getPatGeneratedDob() != null) {
            patientData.setPatGeneratedDob(DateUtil.convertStringToDate(patient.getPatGeneratedDob()));
        }
        if (patient.getPatRowInvalidated() != null) {
            patientData.setPatRowInvalidated(patient.getPatRowInvalidated());
        }
        if (patient.getPatRowInvalidatedDateTime() != null) {
            patientData.setPatRowInvalidatedDateTime(DateUtil.convertStringToCalendar(patient.getPatRowInvalidatedDateTime()));
        }
        if (patient.getPatState() != null) {
            patientData.setPatState(patient.getPatState());
        }
        if (patient.getPatStatus() != null) {
            patientData.setPatStatus(patient.getPatStatus());
        }
        if (patient.getCreatedUserRid() != null) {
            patientData.setCreatedUserRid(patient.getCreatedUserRid());
        }
        if (patient.getModifiedUserRid() != null) {
            patientData.setModifiedUserRid(patient.getModifiedUserRid());
        }

        return patientData;
    }

    //----------------------------------Visit-----------------------------
    public List<Visit> convertVisitDataToVisit(List<VisitData> visitDataList) throws DcometServiceException {
        List<Visit> visitList = new ArrayList<>();
        for (VisitData visitData : visitDataList) {
            visitList.add(convertVisitDataToVisit(visitData));
        }
        return visitList;
    }

    public List<VisitData> convertVisitToVisitData(List<Visit> visitList)
            throws DcometServiceException {
        List<VisitData> visitDataList = new ArrayList<>();
        for (Visit visit : visitList) {
            visitDataList.add(convertVisitToVisitData(visit));
        }
        return visitDataList;
    }

    public Visit convertVisitDataToVisit(VisitData visitData)
            throws DcometServiceException {
        Visit visit = new Visit();
        if (visitData.getId() != null) {
            visit.setId(visitData.getId());
        }
        if (visitData.getVisTypeIndex() != null) {
            visit.setVisTypeIndex(visitData.getVisTypeIndex());
        }
        if (visitData.getVisSubTypeIndex() != null) {
            visit.setVisSubTypeIndex(visitData.getVisSubTypeIndex());
        }
        if (visitData.getVisEntRid() != null) {
            visit.setEntityRid(visitData.getVisEntRid());
        }
        if (visitData.getVisPatRid() != null) {
            visit.setVisPatRid(visitData.getVisPatRid());
        }
        if (visitData.getVisPatType() != null) {
            visit.setVisPatType(visitData.getVisPatType());
        }
        if (visitData.getVisDate() != null) {
            visit.setVisDate(DateUtil.convertDateToString(visitData.getVisDate()));
        }
        if (visitData.getVisApptRid() != null) {
            visit.setVisApptRid(visitData.getVisApptRid());
        }
        if (visitData.getVisEpisodeRid() != null) {
            visit.setVisEpisodeRid(visitData.getVisEpisodeRid());
        }
        if (visitData.getVisSpecialityIndex() != null) {
            visit.setVisSpecialityIndex(visitData.getVisSpecialityIndex());
        }
        if (visitData.getVisReasonIndex() != null) {
            visit.setVisReasonIndex(visitData.getVisReasonIndex());
        }
        if (visitData.getVisRemarks() != null) {
            visit.setVisRemarks(visitData.getVisRemarks());
        }
        if (visitData.getVisConsDocRid() != null) {
            visit.setVisConsDocRid(visitData.getVisConsDocRid());
        }
        if (visitData.getVisAttnDocRid() != null) {
            visit.setVisAttnDocRid(visitData.getVisAttnDocRid());
        }
        if (visitData.getVisRefTypeIndex() != null) {
            visit.setVisRefTypeIndex(visitData.getVisRefTypeIndex());
        }
        if (visitData.getVisRefRid() != null) {
            visit.setVisRefRid(visitData.getVisRefRid());
        }
        if (visitData.getVisDocRemarks() != null) {
            visit.setVisDocRemarks(visitData.getVisDocRemarks());
        }
        if (visitData.getVisState() != null) {
            visit.setVisState(visitData.getVisState());
        }
        if (visitData.getVisStatus() != null) {
            visit.setVisStatus(visitData.getVisStatus());
        }
        if (visitData.getCreatedDateTime() != null) {
            visit.setCreatedDateTime(DateUtil.convertCalendarToString(visitData.getCreatedDateTime()));
        }
        if (visitData.getCreatedUserRid() != null) {
            visit.setCreatedUserRid(visitData.getCreatedUserRid());
        }
        if (visitData.getModifiedDateTime() != null) {
            visit.setModifiedDateTime(DateUtil.convertCalendarToString(visitData.getModifiedDateTime()));
        }
        if (visitData.getModifiedUserRid() != null) {
            visit.setModifiedUserRid(visitData.getModifiedUserRid());
        }

        return visit;
    }

    public VisitData convertVisitToVisitData(Visit visit)
            throws DcometServiceException {
        VisitData visitData = new VisitData();
        if (visit.getId() != null) {
            visitData.setId(visit.getId());
        }
        if (visit.getVisTypeIndex() != null) {
            visitData.setVisTypeIndex(visit.getVisTypeIndex());
        }
        if (visit.getVisSubTypeIndex() != null) {
            visitData.setVisSubTypeIndex(visit.getVisSubTypeIndex());
        }
        if (visit.getEntityRid() != null) {
            visitData.setVisEntRid(visit.getEntityRid());
        }
        if (visit.getVisPatRid() != null) {
            visitData.setVisPatRid(visit.getVisPatRid());
        }
        if (visit.getVisPatType() != null) {
            visitData.setVisPatType(visit.getVisPatType());
        }
        if (visit.getVisDate() != null) {
            visitData.setVisDate(DateUtil.convertStringToDate(visit.getVisDate()));
        }
        if (visit.getVisApptRid() != null) {
            visitData.setVisApptRid(visit.getVisApptRid());
        }
        if (visit.getVisEpisodeRid() != null) {
            visitData.setVisEpisodeRid(visit.getVisEpisodeRid());
        }
        if (visit.getVisSpecialityIndex() != null) {
            visitData.setVisSpecialityIndex(visit.getVisSpecialityIndex());
        }
        if (visit.getVisReasonIndex() != null) {
            visitData.setVisReasonIndex(visit.getVisReasonIndex());
        }
        if (visit.getVisRemarks() != null) {
            visitData.setVisRemarks(visit.getVisRemarks());
        }
        if (visit.getVisConsDocRid() != null) {
            visitData.setVisConsDocRid(visit.getVisConsDocRid());
        }
        if (visit.getVisAttnDocRid() != null) {
            visitData.setVisAttnDocRid(visit.getVisAttnDocRid());
        }
        if (visit.getVisRefTypeIndex() != null) {
            visitData.setVisRefTypeIndex(visit.getVisRefTypeIndex());
        }
        if (visit.getVisRefRid() != null) {
            visitData.setVisRefRid(visit.getVisRefRid());
        }
        if (visit.getVisDocRemarks() != null) {
            visitData.setVisDocRemarks(visit.getVisDocRemarks());
        }
        if (visit.getVisState() != null) {
            visitData.setVisState(visit.getVisState());
        }
        if (visit.getVisStatus() != null) {
            visitData.setVisStatus(visit.getVisStatus());
        }
        if (visit.getCreatedUserRid() != null) {
            visitData.setCreatedUserRid(visit.getCreatedUserRid());
        }
        if (visit.getModifiedUserRid() != null) {
            visitData.setModifiedUserRid(visit.getModifiedUserRid());
        }

        return visitData;
    }

    //-----------------------------ServiceRequest-------------------------
    public List<ServiceRequest> convertServiceRequestDataToServiceRequest(
            List<ServiceRequestData> serviceRequestDataList) throws DcometServiceException {
        List<ServiceRequest> serviceRequestList = new ArrayList<>();
        for (ServiceRequestData serviceRequestData : serviceRequestDataList) {
            serviceRequestList.add(convertServiceRequestDataToServiceRequest(serviceRequestData));
        }
        return serviceRequestList;
    }

    public List<ServiceRequestData> convertServiceRequestToServiceRequestData(List<ServiceRequest> child1List)
            throws DcometServiceException {
        List<ServiceRequestData> child1DataList = new ArrayList<>();
        for (ServiceRequest child1 : child1List) {
            child1DataList.add(convertServiceRequestToServiceRequestData(child1));
        }
        return child1DataList;
    }

    public ServiceRequest convertServiceRequestDataToServiceRequest(ServiceRequestData serviceRequestData)
            throws DcometServiceException {
        ServiceRequest serviceRequest = new ServiceRequest();
        if (serviceRequestData.getId() != null) {
            serviceRequest.setId(serviceRequestData.getId());
        }
        if (serviceRequestData.getSerReqOpRID() != null) {
            serviceRequest.setSerReqOpRID(serviceRequestData.getSerReqOpRID());
        }
        if (serviceRequestData.getSerReqOpVisitRID() != null) {
            serviceRequest.setSerReqOpVisitRID(serviceRequestData.getSerReqOpVisitRID());
        }
        if (serviceRequestData.getSerReqItemName() != null) {
            serviceRequest.setSerReqItemName(serviceRequestData.getSerReqItemName());
        }
        if (serviceRequestData.getSerReqItemPrice() != null) {
            serviceRequest.setSerReqItemPrice(serviceRequestData.getSerReqItemPrice());
        }
        if (serviceRequestData.getSerType() != null) {
            serviceRequest.setSerType(serviceRequestData.getSerType());
        }
        if (serviceRequestData.getSerReqItemQty() != null) {
            serviceRequest.setSerReqItemQty(serviceRequestData.getSerReqItemQty());
        }
        if (serviceRequestData.getSerReqMorning() != null) {
            serviceRequest.setSerReqMorning(serviceRequestData.getSerReqMorning());
        }
        if (serviceRequestData.getSerReqAfternoon() != null) {
            serviceRequest.setSerReqAfternoon(serviceRequestData.getSerReqAfternoon());
        }
        if (serviceRequestData.getSerReqEvening() != null) {
            serviceRequest.setSerReqEvening(serviceRequestData.getSerReqEvening());
        }
        if (serviceRequestData.getSerReqNight() != null) {
            serviceRequest.setSerReqNight(serviceRequestData.getSerReqNight());
        }
        if (serviceRequestData.getSerReqItemRID() != null) {
            serviceRequest.setSerReqItemRID(serviceRequestData.getSerReqItemRID());
        }
        if (serviceRequestData.getSerReqProcessDate() != null) {
            serviceRequest.setSerReqProcessDate(DateUtil.convertDateToString(serviceRequestData.getSerReqProcessDate()));
        }
        if (serviceRequestData.getSerReqBillHRID() != null) {
            serviceRequest.setSerReqBillHRID(serviceRequestData.getSerReqBillHRID());
        }
        if (serviceRequestData.getSerReqBillDRID() != null) {
            serviceRequest.setSerReqBillDRID(serviceRequestData.getSerReqBillDRID());
        }
        if (serviceRequestData.getSerReqStatus() != null) {
            serviceRequest.setSerReqStatus(serviceRequestData.getSerReqStatus());
        }
        if (serviceRequestData.getSerReqEntityRID() != null) {
            serviceRequest.setSerReqEntityRID(serviceRequestData.getSerReqEntityRID());
        }
        if (serviceRequestData.getSerReqLabEnHRID() != null) {
            serviceRequest.setSerReqLabEnHRID(serviceRequestData.getSerReqLabEnHRID());
        }

        return serviceRequest;
    }

    public ServiceRequestData convertServiceRequestToServiceRequestData(ServiceRequest serviceRequest)
            throws DcometServiceException {
        ServiceRequestData serviceRequestData = new ServiceRequestData();
        if (serviceRequest.getId() != null) {
            serviceRequestData.setId(serviceRequest.getId());
        }
        if (serviceRequest.getSerReqOpRID() != null) {
            serviceRequestData.setSerReqOpRID(serviceRequest.getSerReqOpRID());
        }
        if (serviceRequest.getSerReqOpVisitRID() != null) {
            serviceRequestData.setSerReqOpVisitRID(serviceRequest.getSerReqOpVisitRID());
        }
        if (serviceRequest.getSerReqBillHRID() != null) {
            serviceRequestData.setSerReqBillHRID(serviceRequest.getSerReqBillHRID());
        }
        if (serviceRequest.getSerReqItemName() != null) {
            serviceRequestData.setSerReqItemName(serviceRequest.getSerReqItemName());
        }
        if (serviceRequest.getSerReqMorning() != null) {
            serviceRequestData.setSerReqMorning(serviceRequest.getSerReqMorning());
        }
        if (serviceRequest.getSerReqAfternoon() != null) {
            serviceRequestData.setSerReqAfternoon(serviceRequest.getSerReqAfternoon());
        }
        if (serviceRequest.getSerReqEvening() != null) {
            serviceRequestData.setSerReqEvening(serviceRequest.getSerReqEvening());
        }
        if (serviceRequest.getSerReqNight() != null) {
            serviceRequestData.setSerReqNight(serviceRequest.getSerReqNight());
        }
        if (serviceRequest.getSerType() != null) {
            serviceRequestData.setSerType(serviceRequest.getSerType());
        }
        if (serviceRequest.getSerReqItemPrice() != null) {
            serviceRequestData.setSerReqItemPrice(serviceRequest.getSerReqItemPrice());
        }
        if (serviceRequest.getSerReqItemQty() != null) {
            serviceRequestData.setSerReqItemQty(serviceRequest.getSerReqItemQty());
        }
        if (serviceRequest.getSerReqItemRID() != null) {
            serviceRequestData.setSerReqItemRID(serviceRequest.getSerReqItemRID());
        }
        if (serviceRequest.getSerReqProcessDate() != null) {
            serviceRequestData.setSerReqProcessDate(DateUtil.convertStringToDate(serviceRequest.getSerReqProcessDate()));
        }
        if (serviceRequest.getSerReqBillDRID() != null) {
            serviceRequestData.setSerReqBillDRID(serviceRequest.getSerReqBillDRID());
        }
        if (serviceRequest.getSerReqStatus() != null) {
            serviceRequestData.setSerReqStatus(serviceRequest.getSerReqStatus());
        }
        if (serviceRequest.getSerReqEntityRID() != null) {
            serviceRequestData.setSerReqEntityRID(serviceRequest.getSerReqEntityRID());
        }
        if (serviceRequest.getSerReqLabEnHRID() != null) {
            serviceRequestData.setSerReqLabEnHRID(serviceRequest.getSerReqLabEnHRID());
        }

        return serviceRequestData;
    }

    //-----------------------------Complaints-------------------------
    public List<Complaints> convertComplaintsDataToComplaints(
            List<ComplaintsData> complaintsDataList) throws DcometServiceException {
        List<Complaints> complaintsList = new ArrayList<>();
        for (ComplaintsData complaintsData : complaintsDataList) {
            complaintsList.add(convertComplaintsDataToComplaints(complaintsData));
        }
        return complaintsList;
    }

    public List<ComplaintsData> convertComplaintsToComplaintsData(List<Complaints> complaintsList)
            throws DcometServiceException {
        List<ComplaintsData> complaintsDataList = new ArrayList<>();
        for (Complaints complaints : complaintsList) {
            complaintsDataList.add(convertComplaintsToComplaintsData(complaints));
        }
        return complaintsDataList;
    }

    public Complaints convertComplaintsDataToComplaints(ComplaintsData complaintsData)
            throws DcometServiceException {
        Complaints complaints = new Complaints();

        if (complaintsData.getId() != null) {
            complaints.setId(complaintsData.getId());
        }
        if (complaintsData.getCplVisitRID() != null) {
            complaints.setCplVisitRID(complaintsData.getCplVisitRID());
        }
        if (complaintsData.getCplPatRID() != null) {
            complaints.setCplPatRID(complaintsData.getCplPatRID());
        }
        if (complaintsData.getCplName() != null) {
            complaints.setCplName(complaintsData.getCplName());
        }
        if (complaintsData.getCplNameIndex() != null) {
            complaints.setCplNameIndex(complaintsData.getCplNameIndex());
        }
        if (complaintsData.getCplDesc() != null) {
            complaints.setCplDesc(complaintsData.getCplDesc());
        }
        if (complaintsData.getCplDescRangeIndex() != null) {
            complaints.setCplDescRangeIndex(complaintsData.getCplDescRangeIndex());
        }
        if (complaintsData.getCplCurrentStatus() != null) {
            complaints.setCplCurrentStatus(complaintsData.getCplCurrentStatus());
        }
        if (complaintsData.getCplCurrentStatusIndex() != null) {
            complaints.setCplCurrentStatusIndex(complaintsData.getCplCurrentStatusIndex());
        }
        if (complaintsData.getCplEntityRid() != null) {
            complaints.setEntityRid(complaintsData.getCplEntityRid());
        }
        if (complaintsData.getCreatedUserRid() != null) {
            complaints.setCreatedUserRid(complaintsData.getCreatedUserRid());
        }
        if (complaintsData.getCreatedDateTime() != null) {
            complaints.setCreatedDateTime(DateUtil.convertCalendarToString(complaintsData.getCreatedDateTime()));
        }
        if (complaintsData.getModifiedUserRid() != null) {
            complaints.setModifiedUserRid(complaintsData.getModifiedUserRid());
        }
        if (complaintsData.getModifiedDateTime() != null) {
            complaints.setModifiedDateTime(DateUtil.convertCalendarToString(complaintsData.getModifiedDateTime()));
        }

        return complaints;
    }

    public ComplaintsData convertComplaintsToComplaintsData(Complaints complaints)
            throws DcometServiceException {
        ComplaintsData complaintsData = new ComplaintsData();

        if (complaints.getId() != null) {
            complaintsData.setId(complaints.getId());
        }
        if (complaints.getCplVisitRID() != null) {
            complaintsData.setCplVisitRID(complaints.getCplVisitRID());
        }
        if (complaints.getCplPatRID() != null) {
            complaintsData.setCplPatRID(complaints.getCplPatRID());
        }
        if (complaints.getCplName() != null) {
            complaintsData.setCplName(complaints.getCplName());
        }
        if (complaints.getCplNameIndex() != null) {
            complaintsData.setCplNameIndex(complaints.getCplNameIndex());
        }
        if (complaints.getCplDesc() != null) {
            complaintsData.setCplDesc(complaints.getCplDesc());
        }
        if (complaints.getCplDescRangeIndex() != null) {
            complaintsData.setCplDescRangeIndex(complaints.getCplDescRangeIndex());
        }
        if (complaints.getCplCurrentStatus() != null) {
            complaintsData.setCplCurrentStatus(complaints.getCplCurrentStatus());
        }
        if (complaints.getCplCurrentStatusIndex() != null) {
            complaintsData.setCplCurrentStatusIndex(complaints.getCplCurrentStatusIndex());
        }
        if (complaints.getEntityRid() != null) {
            complaintsData.setCplEntityRid(complaints.getEntityRid());
        }
        if (complaints.getCreatedUserRid() != null) {
            complaintsData.setCreatedUserRid(complaints.getCreatedUserRid());
        }
        if (complaints.getModifiedUserRid() != null) {
            complaintsData.setModifiedUserRid(complaints.getModifiedUserRid());
        }

        return complaintsData;
    }

    //-----------------------------VisitPlan-------------------------
    public List<VisitPlan> convertVisitPlanDataToVisitPlan(
            List<VisitPlanData> visitPlanDataList) throws DcometServiceException {
        List<VisitPlan> visitPlanList = new ArrayList<>();
        for (VisitPlanData visitPlanData : visitPlanDataList) {
            visitPlanList.add(convertVisitPlanDataToVisitPlan(visitPlanData));
        }
        return visitPlanList;
    }

    public List<VisitPlanData> convertVisitPlanToVisitPlanData(List<VisitPlan> visitPlanList)
            throws DcometServiceException {
        List<VisitPlanData> visitPlanDataList = new ArrayList<>();
        for (VisitPlan visitPlan : visitPlanList) {
            visitPlanDataList.add(convertVisitPlanToVisitPlanData(visitPlan));
        }
        return visitPlanDataList;
    }

    public VisitPlan convertVisitPlanDataToVisitPlan(VisitPlanData visitPlanData)
            throws DcometServiceException {
        VisitPlan visitPlan = new VisitPlan();

        if (visitPlanData.getId() != null) {
            visitPlan.setId(visitPlanData.getId());
        }
        if (visitPlanData.getVispPatRID() != null) {
            visitPlan.setVispPatRID(visitPlanData.getVispPatRID());
        }
        if (visitPlanData.getVispEntityRid() != null) {
            visitPlan.setEntityRid(visitPlanData.getVispEntityRid());
        }
        if (visitPlanData.getCreatedUserRid() != null) {
            visitPlan.setCreatedUserRid(visitPlanData.getCreatedUserRid());
        }
        if (visitPlanData.getCreatedDateTime() != null) {
            visitPlan.setCreatedDateTime(DateUtil.convertCalendarToString(visitPlanData.getCreatedDateTime()));
        }
        if (visitPlanData.getModifiedUserRid() != null) {
            visitPlan.setModifiedUserRid(visitPlanData.getModifiedUserRid());
        }
        if (visitPlanData.getModifiedDateTime() != null) {
            visitPlan.setModifiedDateTime(DateUtil.convertCalendarToString(visitPlanData.getModifiedDateTime()));
        }

        return visitPlan;
    }

    public VisitPlanData convertVisitPlanToVisitPlanData(VisitPlan visitPlan)
            throws DcometServiceException {
        VisitPlanData visitPlanData = new VisitPlanData();

        if (visitPlan.getId() != null) {
            visitPlanData.setId(visitPlan.getId());
        }
        if (visitPlan.getVispPatRID() != null) {
            visitPlanData.setVispPatRID(visitPlan.getVispPatRID());
        }
        if (visitPlan.getEntityRid() != null) {
            visitPlanData.setVispEntityRid(visitPlan.getEntityRid());
        }
        if (visitPlan.getCreatedUserRid() != null) {
            visitPlanData.setCreatedUserRid(visitPlan.getCreatedUserRid());
        }

        if (visitPlan.getModifiedUserRid() != null) {
            visitPlanData.setModifiedUserRid(visitPlan.getModifiedUserRid());
        }

        return visitPlanData;
    }

    //-----------------------------VisitVitals-------------------------
    public List<VisitVitals> convertVisitVitalsDataToVisitVitals(
            List<VisitVitalsData> visitVitalsDataList) throws DcometServiceException {
        List<VisitVitals> visitVitalsList = new ArrayList<>();
        for (VisitVitalsData visitVitalsData : visitVitalsDataList) {
            visitVitalsList.add(convertVisitVitalsDataToVisitVitals(visitVitalsData));
        }
        return visitVitalsList;
    }

    public List<VisitVitalsData> convertVisitVitalsToVisitVitalsData(List<VisitVitals> visitVitalsList)
            throws DcometServiceException {
        List<VisitVitalsData> visitVitalsDataList = new ArrayList<>();
        for (VisitVitals visitVitals : visitVitalsList) {
            visitVitalsDataList.add(convertVisitVitalsToVisitVitalsData(visitVitals));
        }
        return visitVitalsDataList;
    }

    public VisitVitals convertVisitVitalsDataToVisitVitals(VisitVitalsData visitVitalsData)
            throws DcometServiceException {
        VisitVitals visitVitals = new VisitVitals();

        if (visitVitalsData.getId() != null) {
            visitVitals.setId(visitVitalsData.getId());
        }
        if (visitVitalsData.getVitVisRID() != null) {
            visitVitals.setVitVisRID(visitVitalsData.getVitVisRID());
        }
        if (visitVitalsData.getVitPatRID() != null) {
            visitVitals.setVitPatRID(visitVitalsData.getVitPatRID());
        }
        if (visitVitalsData.getVitName() != null) {
            visitVitals.setVitName(visitVitalsData.getVitName());
        }
        if (visitVitalsData.getVitDdictIndex() != null) {
            visitVitals.setVitDdictIndex(visitVitalsData.getVitDdictIndex());
        }
        if (visitVitalsData.getVitUom() != null) {
            visitVitals.setVitUom(visitVitalsData.getVitUom());
        }
        if (visitVitalsData.getVitValue() != null) {
            visitVitals.setVitValue(visitVitalsData.getVitValue());
        }
        if (visitVitalsData.getVitEntityRid() != null) {
            visitVitals.setEntityRid(visitVitalsData.getVitEntityRid());
        }
        if (visitVitalsData.getCreatedUserRid() != null) {
            visitVitals.setCreatedUserRid(visitVitalsData.getCreatedUserRid());
        }
        if (visitVitalsData.getCreatedDateTime() != null) {
            visitVitals.setCreatedDateTime(DateUtil.convertCalendarToString(visitVitalsData.getCreatedDateTime()));
        }
        if (visitVitalsData.getModifiedUserRid() != null) {
            visitVitals.setModifiedUserRid(visitVitalsData.getModifiedUserRid());
        }
        if (visitVitalsData.getModifiedDateTime() != null) {
            visitVitals.setModifiedDateTime(DateUtil.convertCalendarToString(visitVitalsData.getModifiedDateTime()));
        }

        return visitVitals;
    }

    public VisitVitalsData convertVisitVitalsToVisitVitalsData(VisitVitals visitVitals)
            throws DcometServiceException {
        VisitVitalsData visitVitalsData = new VisitVitalsData();

        if (visitVitals.getId() != null) {
            visitVitalsData.setId(visitVitals.getId());
        }
        if (visitVitals.getVitVisRID() != null) {
            visitVitalsData.setVitVisRID(visitVitals.getVitVisRID());
        }
        if (visitVitals.getVitPatRID() != null) {
            visitVitalsData.setVitPatRID(visitVitals.getVitPatRID());
        }
        if (visitVitals.getVitName() != null) {
            visitVitalsData.setVitName(visitVitals.getVitName());
        }
        if (visitVitals.getVitDdictIndex() != null) {
            visitVitalsData.setVitDdictIndex(visitVitals.getVitDdictIndex());
        }
        if (visitVitals.getVitUom() != null) {
            visitVitalsData.setVitUom(visitVitals.getVitUom());
        }
        if (visitVitals.getVitValue() != null) {
            visitVitalsData.setVitValue(visitVitals.getVitValue());
        }
        if (visitVitals.getEntityRid() != null) {
            visitVitalsData.setVitEntityRid(visitVitals.getEntityRid());
        }
        if (visitVitals.getCreatedUserRid() != null) {
            visitVitalsData.setCreatedUserRid(visitVitals.getCreatedUserRid());
        }
        if (visitVitals.getModifiedUserRid() != null) {
            visitVitalsData.setModifiedUserRid(visitVitals.getModifiedUserRid());
        }

        return visitVitalsData;
    }

    //-----------------------------VisitTemplate-------------------------
    public List<VisitTemplate> convertVisitTemplateDataToVisitTemplate(
            List<VisitTemplateData> visitTemplateDataList) throws DcometServiceException {
        List<VisitTemplate> visitTemplateList = new ArrayList<>();
        for (VisitTemplateData visitTemplateData : visitTemplateDataList) {
            visitTemplateList.add(convertVisitTemplateDataToVisitTemplate(visitTemplateData));
        }
        return visitTemplateList;
    }

    public List<VisitTemplateData> convertVisitTemplateToVisitTemplateData(List<VisitTemplate> visitTemplateList)
            throws DcometServiceException {
        List<VisitTemplateData> visitTemplateDataList = new ArrayList<>();
        for (VisitTemplate visitTemplate : visitTemplateList) {
            visitTemplateDataList.add(convertVisitTemplateToVisitTemplateData(visitTemplate));
        }
        return visitTemplateDataList;
    }

    public VisitTemplate convertVisitTemplateDataToVisitTemplate(VisitTemplateData visitTemplateData)
            throws DcometServiceException {
        VisitTemplate visitTemplate = new VisitTemplate();

        if (visitTemplateData.getId() != null) {
            visitTemplate.setId(visitTemplateData.getId());
        }
        if (visitTemplateData.getVistVisitRID() != null) {
            visitTemplate.setVistVisitRID(visitTemplateData.getVistVisitRID());
        }
        if (visitTemplateData.getVistGroup() != null) {
            visitTemplate.setVistGroup(visitTemplateData.getVistGroup());
        }
        if (visitTemplateData.getVistSubGroup() != null) {
            visitTemplate.setVistSubGroup(visitTemplateData.getVistSubGroup());
        }
        if (visitTemplateData.getVistType() != null) {
            visitTemplate.setVistType(visitTemplateData.getVistType());
        }
        if (visitTemplateData.getVistSpeciality() != null) {
            visitTemplate.setVistSpeciality(visitTemplateData.getVistSpeciality());
        }
        if (visitTemplateData.getVistPatRID() != null) {
            visitTemplate.setVistPatRID(visitTemplateData.getVistPatRID());
        }
        if (visitTemplateData.getVistEntityRid() != null) {
            visitTemplate.setEntityRid(visitTemplateData.getVistEntityRid());
        }
        if (visitTemplateData.getVistNodes() != null) {
            visitTemplate.setVistNodes(visitTemplateData.getVistNodes());
        }
        if (visitTemplateData.getVistSeqNum() != null) {
            visitTemplate.setVistSeqNum(visitTemplateData.getVistSeqNum());
        }
        if (visitTemplateData.getCreatedUserRid() != null) {
            visitTemplate.setCreatedUserRid(visitTemplateData.getCreatedUserRid());
        }
        if (visitTemplateData.getCreatedDateTime() != null) {
            visitTemplate.setCreatedDateTime(DateUtil.convertCalendarToString(visitTemplateData.getCreatedDateTime()));
        }
        if (visitTemplateData.getModifiedUserRid() != null) {
            visitTemplate.setModifiedUserRid(visitTemplateData.getModifiedUserRid());
        }
        if (visitTemplateData.getModifiedDateTime() != null) {
            visitTemplate.setModifiedDateTime(DateUtil.convertCalendarToString(visitTemplateData.getModifiedDateTime()));
        }

        return visitTemplate;
    }

    public VisitTemplateData convertVisitTemplateToVisitTemplateData(VisitTemplate visitTemplate)
            throws DcometServiceException {
        VisitTemplateData visitTemplateData = new VisitTemplateData();

        if (visitTemplate.getId() != null) {
            visitTemplateData.setId(visitTemplate.getId());
        }
        if (visitTemplate.getVistVisitRID() != null) {
            visitTemplateData.setVistVisitRID(visitTemplate.getVistVisitRID());
        }
        if (visitTemplate.getVistGroup() != null) {
            visitTemplateData.setVistGroup(visitTemplate.getVistGroup());
        }
        if (visitTemplate.getVistSubGroup() != null) {
            visitTemplateData.setVistSubGroup(visitTemplate.getVistSubGroup());
        }
        if (visitTemplate.getVistType() != null) {
            visitTemplateData.setVistType(visitTemplate.getVistType());
        }
        if (visitTemplate.getVistSpeciality() != null) {
            visitTemplateData.setVistSpeciality(visitTemplate.getVistSpeciality());
        }
        if (visitTemplate.getVistPatRID() != null) {
            visitTemplateData.setVistPatRID(visitTemplate.getVistPatRID());
        }
        if (visitTemplate.getEntityRid() != null) {
            visitTemplateData.setVistEntityRid(visitTemplate.getEntityRid());
        }
        if (visitTemplate.getVistNodes() != null) {
            visitTemplateData.setVistNodes(visitTemplate.getVistNodes());
        }
        if (visitTemplate.getVistSeqNum() != null) {
            visitTemplateData.setVistSeqNum(visitTemplate.getVistSeqNum());
        }
        if (visitTemplate.getCreatedUserRid() != null) {
            visitTemplateData.setCreatedUserRid(visitTemplate.getCreatedUserRid());
        }
        if (visitTemplate.getModifiedUserRid() != null) {
            visitTemplateData.setModifiedUserRid(visitTemplate.getModifiedUserRid());
        }

        return visitTemplateData;
    }

    //-------------------------------DrugRequest----------------------------------
    public List<DrugRequestHData> convertDrugRequestHToDrugRequestHData(List<DrugRequestH> drugRequestHList) throws DcometServiceException {
        List<DrugRequestHData> DrugRequestHDataList = new ArrayList<>();
        for (DrugRequestH drugRequestH : drugRequestHList) {
            DrugRequestHDataList.add(convertDrugRequestHToDrugRequestHData(drugRequestH));
        }
        return DrugRequestHDataList;
    }

    public List<DrugRequestH> convertDrugRequestHDataToDrugRequestH(List<DrugRequestHData> drugRequestHDataList) throws DcometServiceException {
        List<DrugRequestH> DrugRequestHList = new ArrayList<>();
        for (DrugRequestHData drugRequestHData : drugRequestHDataList) {
            DrugRequestHList.add(convertDrugRequestHDataToDrugRequestH(drugRequestHData));
        }
        return DrugRequestHList;
    }

    public DrugRequestHData convertDrugRequestHToDrugRequestHData(DrugRequestH DrugRequestH)
            throws DcometServiceException {
        DrugRequestHData drugRequestHData = new DrugRequestHData();

        if (DrugRequestH.getId() != null) {
            drugRequestHData.setId(DrugRequestH.getId());
        }
        if (DrugRequestH.getDrugReqHOpRID() != null) {
            drugRequestHData.setDrugReqHOpRID(DrugRequestH.getDrugReqHOpRID());
        }
        if (DrugRequestH.getDrugReqHOpVBisitRID() != null) {
            drugRequestHData.setDrugReqHOpVBisitRID(DrugRequestH.getDrugReqHOpVBisitRID());
        }
        if (DrugRequestH.getDrugReqHPatMrn() != null) {
            drugRequestHData.setDrugReqHPatMrn(DrugRequestH.getDrugReqHPatMrn());
        }
        if (DrugRequestH.getDrugReqHPatName() != null) {
            drugRequestHData.setDrugReqHPatName(DrugRequestH.getDrugReqHPatName());
        }
        if (DrugRequestH.getDrugReqHBillHRID() != null) {
            drugRequestHData.setDrugReqHBillHRID(DrugRequestH.getDrugReqHBillHRID());
        }
        if (DrugRequestH.getDrugReqHStatus() != null) {
            drugRequestHData.setDrugReqHStatus(DrugRequestH.getDrugReqHStatus());
        }
        if (DrugRequestH.getDrugReqHState() != null) {
            drugRequestHData.setDrugReqHState(DrugRequestH.getDrugReqHState());
        }
        if (DrugRequestH.getDrugReqHType() != null) {
            drugRequestHData.setDrugReqHType(DrugRequestH.getDrugReqHType());
        }
        if (DrugRequestH.getDrugReqHLabEnHRID() != null) {
            drugRequestHData.setDrugReqHLabEnHRID(DrugRequestH.getDrugReqHLabEnHRID());
        }
        if (DrugRequestH.getEntityRid() != null) {
            drugRequestHData.setDrugReqHEntityRID(DrugRequestH.getEntityRid());
        }
        if (DrugRequestH.getCreatedUserRid() != null) {
            drugRequestHData.setCreatedUserRid(DrugRequestH.getCreatedUserRid());
        }
        if (DrugRequestH.getModifiedUserRid() != null) {
            drugRequestHData.setModifiedUserRid(DrugRequestH.getModifiedUserRid());
        }

        return drugRequestHData;
    }

    public DrugRequestH convertDrugRequestHDataToDrugRequestH(DrugRequestHData drugRequestHData)
            throws DcometServiceException {
        DrugRequestH drugRequestH = new DrugRequestH();

        if (drugRequestHData.getId() != null) {
            drugRequestH.setId(drugRequestHData.getId());
        }
        if (drugRequestHData.getDrugReqHOpRID() != null) {
            drugRequestH.setDrugReqHOpRID(drugRequestHData.getDrugReqHOpRID());
        }
        if (drugRequestHData.getDrugReqHOpVBisitRID() != null) {
            drugRequestH.setDrugReqHOpVBisitRID(drugRequestHData.getDrugReqHOpVBisitRID());
        }
        if (drugRequestHData.getDrugReqHPatMrn() != null) {
            drugRequestH.setDrugReqHPatMrn(drugRequestHData.getDrugReqHPatMrn());
        }
        if (drugRequestHData.getDrugReqHPatName() != null) {
            drugRequestH.setDrugReqHPatName(drugRequestHData.getDrugReqHPatName());
        }
        if (drugRequestHData.getDrugReqHBillHRID() != null) {
            drugRequestH.setDrugReqHBillHRID(drugRequestHData.getDrugReqHBillHRID());
        }
        if (drugRequestHData.getDrugReqHStatus() != null) {
            drugRequestH.setDrugReqHStatus(drugRequestHData.getDrugReqHStatus());
        }
        if (drugRequestHData.getDrugReqHState() != null) {
            drugRequestH.setDrugReqHState(drugRequestHData.getDrugReqHState());
        }
        if (drugRequestHData.getDrugReqHType() != null) {
            drugRequestH.setDrugReqHType(drugRequestHData.getDrugReqHType());
        }
        if (drugRequestHData.getDrugReqHLabEnHRID() != null) {
            drugRequestH.setDrugReqHLabEnHRID(drugRequestHData.getDrugReqHLabEnHRID());
        }
        if (drugRequestHData.getDrugReqHEntityRID() != null) {
            drugRequestH.setEntityRid(drugRequestHData.getDrugReqHEntityRID());
        }
        if (drugRequestHData.getCreatedUserRid() != null) {
            drugRequestH.setCreatedUserRid(drugRequestHData.getCreatedUserRid());
        }
        if (drugRequestHData.getModifiedUserRid() != null) {
            drugRequestH.setModifiedUserRid(drugRequestHData.getModifiedUserRid());
        }
        if (drugRequestHData.getModifiedDateTime() != null) {
            drugRequestH.setModifiedDateTime(DateUtil.convertCalendarToString(drugRequestHData.getModifiedDateTime()));
        }
        if (drugRequestHData.getCreatedDateTime() != null) {
            drugRequestH.setCreatedDateTime(DateUtil.convertCalendarToString(drugRequestHData.getCreatedDateTime()));
        }

        return drugRequestH;
    }

    public List<DrugRequestD> convertDrugRequestDDataToDrugRequestD(List<DrugRequestDData> drugRequestDDataList) throws DcometServiceException {
        List<DrugRequestD> drugRequestDList = new ArrayList<>();
        for (DrugRequestDData drugRequestDData : drugRequestDDataList) {
            drugRequestDList.add(convertDrugRequestDDataToDrugRequestD(drugRequestDData));
        }
        return drugRequestDList;
    }

    public List<DrugRequestDData> convertDrugRequestDToDrugRequestDData(List<DrugRequestD> drugRequestDList) throws DcometServiceException {
        List<DrugRequestDData> drugRequestDDataList = new ArrayList<>();
        for (DrugRequestD drugRequestD : drugRequestDList) {
            drugRequestDDataList.add(convertDrugRequestDToDrugRequestDData(drugRequestD));
        }
        return drugRequestDDataList;
    }

    public DrugRequestD convertDrugRequestDDataToDrugRequestD(DrugRequestDData drugRequestDData)
            throws DcometServiceException {
        DrugRequestD drugRequestD = new DrugRequestD();

        if (drugRequestDData.getId() != null) {
            drugRequestD.setId(drugRequestDData.getId());
        }
//        if (drugRequestDData.getDrugReqDProcessDate() != null) {
//            drugRequestD.setDrugReqDProcessDate(DateUtil.convertDateToString(drugRequestDData.getDrugReqDProcessDate()));
//        }
        if (drugRequestDData.getDrugReqDNight() != null) {
            drugRequestD.setDrugReqDNight(drugRequestDData.getDrugReqDNight());
        }
        if (drugRequestDData.getDrugReqDMrng() != null) {
            drugRequestD.setDrugReqDMrng(drugRequestDData.getDrugReqDMrng());
        }
        if (drugRequestDData.getDrugReqDItemRID() != null) {
            drugRequestD.setDrugReqDItemRID(drugRequestDData.getDrugReqDItemRID());
        }
        if (drugRequestDData.getDrugReqDItemQty() != null) {
            drugRequestD.setDrugReqDItemQty(drugRequestDData.getDrugReqDItemQty());
        }
        if (drugRequestDData.getDrugReqDItemPrice() != null) {
            drugRequestD.setDrugReqDItemPrice(drugRequestDData.getDrugReqDItemPrice());
        }
        if (drugRequestDData.getDrugReqDItemName() != null) {
            drugRequestD.setDrugReqDItemName(drugRequestDData.getDrugReqDItemName());
        }
        if (drugRequestDData.getDrugReqDEve() != null) {
            drugRequestD.setDrugReqDEve(drugRequestDData.getDrugReqDEve());
        }
        if (drugRequestDData.getDrugReqDBillDRID() != null) {
            drugRequestD.setDrugReqDBillDRID(drugRequestDData.getDrugReqDBillDRID());
        }
        if (drugRequestDData.getDrugReqDAfternoon() != null) {
            drugRequestD.setDrugReqDAfternoon(drugRequestDData.getDrugReqDAfternoon());
        }
        if (drugRequestDData.getDruReqDSrhRID() != null) {
            drugRequestD.setDruReqDSrhRID(drugRequestDData.getDruReqDSrhRID());
        }
//        if (drugRequestDData.getDrugReqDDosageTime() != null) {
//            drugRequestD.setDrugReqDDosageTime(drugRequestDData.getDrugReqDDosageTime());
//        }
//        if (drugRequestDData.getDrugReqDDuration() != null) {
//            drugRequestD.setDrugReqDDuration(drugRequestDData.getDrugReqDDuration());
//        }
//        if (drugRequestDData.getDrugReqDDurationTime() != null) {
//            drugRequestD.setDrugReqDDurationTime(drugRequestDData.getDrugReqDDurationTime());
//        }
        return drugRequestD;

    }

    public DrugRequestDData convertDrugRequestDToDrugRequestDData(DrugRequestD drugRequestD) throws DcometServiceException {
        DrugRequestDData drugRequestDData = new DrugRequestDData();

        if (drugRequestD.getId() != null) {
            drugRequestDData.setId(drugRequestD.getId());
        }
//        if (drugRequestD.getDrugReqDProcessDate() != null) {
//            drugRequestDData.setDrugReqDProcessDate(DateUtil.convertStringToDate(drugRequestD.getDrugReqDProcessDate()));
//        }
        if (drugRequestD.getDrugReqDNight() != null) {
            drugRequestDData.setDrugReqDNight(drugRequestD.getDrugReqDNight());
        }
        if (drugRequestD.getDrugReqDMrng() != null) {
            drugRequestDData.setDrugReqDMrng(drugRequestD.getDrugReqDMrng());
        }
        if (drugRequestD.getDrugReqDItemRID() != null) {
            drugRequestDData.setDrugReqDItemRID(drugRequestD.getDrugReqDItemRID());
        }
        if (drugRequestD.getDrugReqDItemQty() != null) {
            drugRequestDData.setDrugReqDItemQty(drugRequestD.getDrugReqDItemQty());
        }
        if (drugRequestD.getDrugReqDItemPrice() != null) {
            drugRequestDData.setDrugReqDItemPrice(drugRequestD.getDrugReqDItemPrice());
        }
        if (drugRequestD.getDrugReqDItemName() != null) {
            drugRequestDData.setDrugReqDItemName(drugRequestD.getDrugReqDItemName());
        }
        if (drugRequestD.getDrugReqDEve() != null) {
            drugRequestDData.setDrugReqDEve(drugRequestD.getDrugReqDEve());
        }
        if (drugRequestD.getDrugReqDBillDRID() != null) {
            drugRequestDData.setDrugReqDBillDRID(drugRequestD.getDrugReqDBillDRID());
        }
        if (drugRequestD.getDrugReqDAfternoon() != null) {
            drugRequestDData.setDrugReqDAfternoon(drugRequestD.getDrugReqDAfternoon());
        }
        if (drugRequestD.getDruReqDSrhRID() != null) {
            drugRequestDData.setDruReqDSrhRID(drugRequestD.getDruReqDSrhRID());
        }
//        if (drugRequestD.getDrugReqDDosageTime() != null) {
//            drugRequestDData.setDrugReqDDosageTime(drugRequestD.getDrugReqDDosageTime());
//        }
//        if (drugRequestD.getDrugReqDDuration() != null) {
//            drugRequestDData.setDrugReqDDuration(drugRequestD.getDrugReqDDuration());
//        }
//        if (drugRequestD.getDrugReqDDurationTime() != null) {
//            drugRequestDData.setDrugReqDDurationTime(drugRequestD.getDrugReqDDurationTime());
//        }

        return drugRequestDData;

    }
}
